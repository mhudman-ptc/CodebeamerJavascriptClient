/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import ProjectReference from './ProjectReference';
import TrackerFieldLayoutSettings from './TrackerFieldLayoutSettings';
import TrackerReference from './TrackerReference';
import TrackerTypeReference from './TrackerTypeReference';
import UserReference from './UserReference';

/**
 * The Tracker model module.
 * @module model/Tracker
 * @version 3.0
 */
export default class Tracker {
  /**
   * Constructs a new <code>Tracker</code>.
   * Basic properties of a codebeamer tracker
   * @alias module:model/Tracker
   * @class
   * @param defaultShowAncestorItems {Boolean} Default Outline should show Ancestor Items or not
   * @param defaultShowDescendantItems {Boolean} Default Outline should show Descendant Items or not
   * @param deleted {Boolean} Indicator if the tracker is deleted
   * @param hidden {Boolean} Indicator if the tracker is hidden
   * @param onlyWorkflowCanCreateNewReferringItem {Boolean} If true, then the only way to create new referring items is through workflow actions
   * @param usingQuickTransitions {Boolean} If true, then every transition will be executed immediately (if possible) without opening an editor for the item
   * @param usingWorkflow {Boolean} Should transitions and workflow actions be available in the tracker or not
   */
  constructor(defaultShowAncestorItems, defaultShowDescendantItems, deleted, hidden, onlyWorkflowCanCreateNewReferringItem, usingQuickTransitions, usingWorkflow) {
    this.defaultShowAncestorItems = defaultShowAncestorItems;
    this.defaultShowDescendantItems = defaultShowDescendantItems;
    this.deleted = deleted;
    this.hidden = hidden;
    this.onlyWorkflowCanCreateNewReferringItem = onlyWorkflowCanCreateNewReferringItem;
    this.usingQuickTransitions = usingQuickTransitions;
    this.usingWorkflow = usingWorkflow;
  }

  /**
   * Constructs a <code>Tracker</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Tracker} obj Optional instance to populate.
   * @return {module:model/Tracker} The populated <code>Tracker</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Tracker();
      if (data.hasOwnProperty('availableAsTemplate'))
        obj.availableAsTemplate = ApiClient.convertToType(data['availableAsTemplate'], 'Boolean');
      if (data.hasOwnProperty('color'))
        obj.color = ApiClient.convertToType(data['color'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = UserReference.constructFromObject(data['createdBy']);
      if (data.hasOwnProperty('defaultShowAncestorItems'))
        obj.defaultShowAncestorItems = ApiClient.convertToType(data['defaultShowAncestorItems'], 'Boolean');
      if (data.hasOwnProperty('defaultShowDescendantItems'))
        obj.defaultShowDescendantItems = ApiClient.convertToType(data['defaultShowDescendantItems'], 'Boolean');
      if (data.hasOwnProperty('deleted'))
        obj.deleted = ApiClient.convertToType(data['deleted'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('descriptionFormat'))
        obj.descriptionFormat = ApiClient.convertToType(data['descriptionFormat'], 'String');
      if (data.hasOwnProperty('hidden'))
        obj.hidden = ApiClient.convertToType(data['hidden'], 'Boolean');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('keyName'))
        obj.keyName = ApiClient.convertToType(data['keyName'], 'String');
      if (data.hasOwnProperty('modifiedAt'))
        obj.modifiedAt = ApiClient.convertToType(data['modifiedAt'], 'Date');
      if (data.hasOwnProperty('modifiedBy'))
        obj.modifiedBy = UserReference.constructFromObject(data['modifiedBy']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('onlyWorkflowCanCreateNewReferringItem'))
        obj.onlyWorkflowCanCreateNewReferringItem = ApiClient.convertToType(data['onlyWorkflowCanCreateNewReferringItem'], 'Boolean');
      if (data.hasOwnProperty('project'))
        obj.project = ProjectReference.constructFromObject(data['project']);
      if (data.hasOwnProperty('sharedInWorkingSet'))
        obj.sharedInWorkingSet = ApiClient.convertToType(data['sharedInWorkingSet'], 'Boolean');
      if (data.hasOwnProperty('templateTracker'))
        obj.templateTracker = TrackerReference.constructFromObject(data['templateTracker']);
      if (data.hasOwnProperty('trackerFieldLayoutSettingsModel'))
        obj.trackerFieldLayoutSettingsModel = TrackerFieldLayoutSettings.constructFromObject(data['trackerFieldLayoutSettingsModel']);
      if (data.hasOwnProperty('type'))
        obj.type = TrackerTypeReference.constructFromObject(data['type']);
      if (data.hasOwnProperty('usingQuickTransitions'))
        obj.usingQuickTransitions = ApiClient.convertToType(data['usingQuickTransitions'], 'Boolean');
      if (data.hasOwnProperty('usingWorkflow'))
        obj.usingWorkflow = ApiClient.convertToType(data['usingWorkflow'], 'Boolean');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'Number');
    }
    return obj;
  }
}

/**
 * Indicator if the tracker can be used as a template
 * @member {Boolean} availableAsTemplate
 */
Tracker.prototype.availableAsTemplate = undefined;

/**
 * Color of the tracker
 * @member {String} color
 */
Tracker.prototype.color = undefined;

/**
 * The date when the entity was created
 * @member {Date} createdAt
 */
Tracker.prototype.createdAt = undefined;

/**
 * @member {module:model/UserReference} createdBy
 */
Tracker.prototype.createdBy = undefined;

/**
 * Default Outline should show Ancestor Items or not
 * @member {Boolean} defaultShowAncestorItems
 */
Tracker.prototype.defaultShowAncestorItems = undefined;

/**
 * Default Outline should show Descendant Items or not
 * @member {Boolean} defaultShowDescendantItems
 */
Tracker.prototype.defaultShowDescendantItems = undefined;

/**
 * Indicator if the tracker is deleted
 * @member {Boolean} deleted
 */
Tracker.prototype.deleted = undefined;

/**
 * Description of the entity
 * @member {String} description
 */
Tracker.prototype.description = undefined;

/**
 * Allowed values for the <code>descriptionFormat</code> property.
 * @enum {String}
 * @readonly
 */
Tracker.DescriptionFormatEnum = {
  /**
   * value: "PlainText"
   * @const
   */
  plainText: "PlainText",

  /**
   * value: "Html"
   * @const
   */
  html: "Html",

  /**
   * value: "Wiki"
   * @const
   */
  wiki: "Wiki"
};
/**
 * Description format of the entity
 * @member {module:model/Tracker.DescriptionFormatEnum} descriptionFormat
 */
Tracker.prototype.descriptionFormat = undefined;

/**
 * Indicator if the tracker is hidden
 * @member {Boolean} hidden
 */
Tracker.prototype.hidden = undefined;

/**
 * Id of the entity
 * @member {Number} id
 */
Tracker.prototype.id = undefined;

/**
 * Keyname of a tracker
 * @member {String} keyName
 */
Tracker.prototype.keyName = undefined;

/**
 * The date when the entity was modified
 * @member {Date} modifiedAt
 */
Tracker.prototype.modifiedAt = undefined;

/**
 * @member {module:model/UserReference} modifiedBy
 */
Tracker.prototype.modifiedBy = undefined;

/**
 * Name of the entity
 * @member {String} name
 */
Tracker.prototype.name = undefined;

/**
 * If true, then the only way to create new referring items is through workflow actions
 * @member {Boolean} onlyWorkflowCanCreateNewReferringItem
 */
Tracker.prototype.onlyWorkflowCanCreateNewReferringItem = undefined;

/**
 * @member {module:model/ProjectReference} project
 */
Tracker.prototype.project = undefined;

/**
 * If the tracker is shared in a WorkingSet
 * @member {Boolean} sharedInWorkingSet
 */
Tracker.prototype.sharedInWorkingSet = undefined;

/**
 * @member {module:model/TrackerReference} templateTracker
 */
Tracker.prototype.templateTracker = undefined;

/**
 * @member {module:model/TrackerFieldLayoutSettings} trackerFieldLayoutSettingsModel
 */
Tracker.prototype.trackerFieldLayoutSettingsModel = undefined;

/**
 * @member {module:model/TrackerTypeReference} type
 */
Tracker.prototype.type = undefined;

/**
 * If true, then every transition will be executed immediately (if possible) without opening an editor for the item
 * @member {Boolean} usingQuickTransitions
 */
Tracker.prototype.usingQuickTransitions = undefined;

/**
 * Should transitions and workflow actions be available in the tracker or not
 * @member {Boolean} usingWorkflow
 */
Tracker.prototype.usingWorkflow = undefined;

/**
 * Version of a tracker
 * @member {Number} version
 */
Tracker.prototype.version = undefined;

