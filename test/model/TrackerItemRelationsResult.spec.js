/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerItemRelationsResult', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerItemRelationsResult();
      });

      it('should create an instance of TrackerItemRelationsResult', function() {
        // TODO: update the code to test TrackerItemRelationsResult
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerItemRelationsResult);
      });

      it('should have the property downstreamReferences (base name: "downstreamReferences")', function() {
        // TODO: update the code to test the property downstreamReferences
        expect(instance).to.have.property('downstreamReferences');
        // expect(instance.downstreamReferences).to.be(expectedValueLiteral);
      });

      it('should have the property incomingAssociations (base name: "incomingAssociations")', function() {
        // TODO: update the code to test the property incomingAssociations
        expect(instance).to.have.property('incomingAssociations');
        // expect(instance.incomingAssociations).to.be(expectedValueLiteral);
      });

      it('should have the property isLastPage (base name: "isLastPage")', function() {
        // TODO: update the code to test the property isLastPage
        expect(instance).to.have.property('isLastPage');
        // expect(instance.isLastPage).to.be(expectedValueLiteral);
      });

      it('should have the property itemCount (base name: "itemCount")', function() {
        // TODO: update the code to test the property itemCount
        expect(instance).to.have.property('itemCount');
        // expect(instance.itemCount).to.be(expectedValueLiteral);
      });

      it('should have the property itemId (base name: "itemId")', function() {
        // TODO: update the code to test the property itemId
        expect(instance).to.have.property('itemId');
        // expect(instance.itemId).to.be(expectedValueLiteral);
      });

      it('should have the property outgoingAssociations (base name: "outgoingAssociations")', function() {
        // TODO: update the code to test the property outgoingAssociations
        expect(instance).to.have.property('outgoingAssociations');
        // expect(instance.outgoingAssociations).to.be(expectedValueLiteral);
      });

      it('should have the property page (base name: "page")', function() {
        // TODO: update the code to test the property page
        expect(instance).to.have.property('page');
        // expect(instance.page).to.be(expectedValueLiteral);
      });

      it('should have the property pageSize (base name: "pageSize")', function() {
        // TODO: update the code to test the property pageSize
        expect(instance).to.have.property('pageSize');
        // expect(instance.pageSize).to.be(expectedValueLiteral);
      });

      it('should have the property upstreamReferences (base name: "upstreamReferences")', function() {
        // TODO: update the code to test the property upstreamReferences
        expect(instance).to.have.property('upstreamReferences');
        // expect(instance.upstreamReferences).to.be(expectedValueLiteral);
      });

    });
  });

}));
