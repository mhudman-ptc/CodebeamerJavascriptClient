/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ArtifactRevisionSearchResult from '../model/ArtifactRevisionSearchResult';
import Association from '../model/Association';
import AssociationType from '../model/AssociationType';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* Association service.
* @module api/AssociationApi
* @version 3.0
*/
export default class AssociationApi {

    /**
    * Constructs a new AssociationApi. 
    * @alias module:api/AssociationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createAssociation operation.
     * @callback moduleapi/AssociationApi~createAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new association
     * @param {module:model/Association} body 
     * @param {module:api/AssociationApi~createAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createAssociation(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAssociation");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Association;

      return this.apiClient.callApi(
        '/v3/associations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAssociation operation.
     * @callback moduleapi/AssociationApi~deleteAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete association
     * @param {Number} associationId 
     * @param {module:api/AssociationApi~deleteAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssociation(associationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling deleteAssociation");
      }

      let pathParams = {
        'associationId': associationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/associations/{associationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAssociation operation.
     * @callback moduleapi/AssociationApi~getAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an association by id
     * @param {Number} associationId 
     * @param {module:api/AssociationApi~getAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAssociation(associationId, callback) {
      
      let postBody = null;
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling getAssociation");
      }

      let pathParams = {
        'associationId': associationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Association;

      return this.apiClient.callApi(
        '/v3/associations/{associationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAssociationHistory operation.
     * @callback moduleapi/AssociationApi~getAssociationHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactRevisionSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the change history of the specified association
     * @param {Number} associationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/AssociationApi~getAssociationHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAssociationHistory(associationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling getAssociationHistory");
      }

      let pathParams = {
        'associationId': associationId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ArtifactRevisionSearchResult;

      return this.apiClient.callApi(
        '/v3/associations/{associationId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAssociationType operation.
     * @callback moduleapi/AssociationApi~getAssociationTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociationType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get association type by id
     * @param {Number} associationTypeId 
     * @param {module:api/AssociationApi~getAssociationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAssociationType(associationTypeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'associationTypeId' is set
      if (associationTypeId === undefined || associationTypeId === null) {
        throw new Error("Missing the required parameter 'associationTypeId' when calling getAssociationType");
      }

      let pathParams = {
        'associationTypeId': associationTypeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = AssociationType;

      return this.apiClient.callApi(
        '/v3/associations/types/{associationTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAvailableAssociationTypes operation.
     * @callback moduleapi/AssociationApi~getAvailableAssociationTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssociationType>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available association types
     * @param {module:api/AssociationApi~getAvailableAssociationTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAvailableAssociationTypes(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [AssociationType];

      return this.apiClient.callApi(
        '/v3/associations/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAssociation operation.
     * @callback moduleapi/AssociationApi~updateAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Association{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update association settings
     * @param {module:model/Association} body 
     * @param {Number} associationId 
     * @param {module:api/AssociationApi~updateAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateAssociation(body, associationId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAssociation");
      }
      // verify the required parameter 'associationId' is set
      if (associationId === undefined || associationId === null) {
        throw new Error("Missing the required parameter 'associationId' when calling updateAssociation");
      }

      let pathParams = {
        'associationId': associationId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Association;

      return this.apiClient.callApi(
        '/v3/associations/{associationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}