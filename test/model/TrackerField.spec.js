/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerField', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerField();
      });

      it('should create an instance of TrackerField', function() {
        // TODO: update the code to test TrackerField
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerField);
      });

      it('should have the property aggregationRule (base name: "aggregationRule")', function() {
        // TODO: update the code to test the property aggregationRule
        expect(instance).to.have.property('aggregationRule');
        // expect(instance.aggregationRule).to.be(expectedValueLiteral);
      });

      it('should have the property choiceOptionSetting (base name: "choiceOptionSetting")', function() {
        // TODO: update the code to test the property choiceOptionSetting
        expect(instance).to.have.property('choiceOptionSetting');
        // expect(instance.choiceOptionSetting).to.be(expectedValueLiteral);
      });

      it('should have the property computedAs (base name: "computedAs")', function() {
        // TODO: update the code to test the property computedAs
        expect(instance).to.have.property('computedAs');
        // expect(instance.computedAs).to.be(expectedValueLiteral);
      });

      it('should have the property computedFieldReferences (base name: "computedFieldReferences")', function() {
        // TODO: update the code to test the property computedFieldReferences
        expect(instance).to.have.property('computedFieldReferences');
        // expect(instance.computedFieldReferences).to.be(expectedValueLiteral);
      });

      it('should have the property dateFieldSettings (base name: "dateFieldSettings")', function() {
        // TODO: update the code to test the property dateFieldSettings
        expect(instance).to.have.property('dateFieldSettings');
        // expect(instance.dateFieldSettings).to.be(expectedValueLiteral);
      });

      it('should have the property defaultValuesInStatuses (base name: "defaultValuesInStatuses")', function() {
        // TODO: update the code to test the property defaultValuesInStatuses
        expect(instance).to.have.property('defaultValuesInStatuses');
        // expect(instance.defaultValuesInStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property dependency (base name: "dependency")', function() {
        // TODO: update the code to test the property dependency
        expect(instance).to.have.property('dependency');
        // expect(instance.dependency).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property digits (base name: "digits")', function() {
        // TODO: update the code to test the property digits
        expect(instance).to.have.property('digits');
        // expect(instance.digits).to.be(expectedValueLiteral);
      });

      it('should have the property distributionRule (base name: "distributionRule")', function() {
        // TODO: update the code to test the property distributionRule
        expect(instance).to.have.property('distributionRule');
        // expect(instance.distributionRule).to.be(expectedValueLiteral);
      });

      it('should have the property globalTypeIds (base name: "globalTypeIds")', function() {
        // TODO: update the code to test the property globalTypeIds
        expect(instance).to.have.property('globalTypeIds');
        // expect(instance.globalTypeIds).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property hideIfFormula (base name: "hideIfFormula")', function() {
        // TODO: update the code to test the property hideIfFormula
        expect(instance).to.have.property('hideIfFormula');
        // expect(instance.hideIfFormula).to.be(expectedValueLiteral);
      });

      it('should have the property hideIfFormulaSameAsFieldId (base name: "hideIfFormulaSameAsFieldId")', function() {
        // TODO: update the code to test the property hideIfFormulaSameAsFieldId
        expect(instance).to.have.property('hideIfFormulaSameAsFieldId');
        // expect(instance.hideIfFormulaSameAsFieldId).to.be(expectedValueLiteral);
      });

      it('should have the property label (base name: "label")', function() {
        // TODO: update the code to test the property label
        expect(instance).to.have.property('label');
        // expect(instance.label).to.be(expectedValueLiteral);
      });

      it('should have the property listable (base name: "listable")', function() {
        // TODO: update the code to test the property listable
        expect(instance).to.have.property('listable');
        // expect(instance.listable).to.be(expectedValueLiteral);
      });

      it('should have the property mandatory (base name: "mandatory")', function() {
        // TODO: update the code to test the property mandatory
        expect(instance).to.have.property('mandatory');
        // expect(instance.mandatory).to.be(expectedValueLiteral);
      });

      it('should have the property mandatoryIfFormula (base name: "mandatoryIfFormula")', function() {
        // TODO: update the code to test the property mandatoryIfFormula
        expect(instance).to.have.property('mandatoryIfFormula');
        // expect(instance.mandatoryIfFormula).to.be(expectedValueLiteral);
      });

      it('should have the property mandatoryIfFormulaSameAsFieldId (base name: "mandatoryIfFormulaSameAsFieldId")', function() {
        // TODO: update the code to test the property mandatoryIfFormulaSameAsFieldId
        expect(instance).to.have.property('mandatoryIfFormulaSameAsFieldId');
        // expect(instance.mandatoryIfFormulaSameAsFieldId).to.be(expectedValueLiteral);
      });

      it('should have the property maxValue (base name: "maxValue")', function() {
        // TODO: update the code to test the property maxValue
        expect(instance).to.have.property('maxValue');
        // expect(instance.maxValue).to.be(expectedValueLiteral);
      });

      it('should have the property minValue (base name: "minValue")', function() {
        // TODO: update the code to test the property minValue
        expect(instance).to.have.property('minValue');
        // expect(instance.minValue).to.be(expectedValueLiteral);
      });

      it('should have the property multipleSelection (base name: "multipleSelection")', function() {
        // TODO: update the code to test the property multipleSelection
        expect(instance).to.have.property('multipleSelection');
        // expect(instance.multipleSelection).to.be(expectedValueLiteral);
      });

      it('should have the property newLine (base name: "newLine")', function() {
        // TODO: update the code to test the property newLine
        expect(instance).to.have.property('newLine');
        // expect(instance.newLine).to.be(expectedValueLiteral);
      });

      it('should have the property omitMerge (base name: "omitMerge")', function() {
        // TODO: update the code to test the property omitMerge
        expect(instance).to.have.property('omitMerge');
        // expect(instance.omitMerge).to.be(expectedValueLiteral);
      });

      it('should have the property omitSuspectedWhenChange (base name: "omitSuspectedWhenChange")', function() {
        // TODO: update the code to test the property omitSuspectedWhenChange
        expect(instance).to.have.property('omitSuspectedWhenChange');
        // expect(instance.omitSuspectedWhenChange).to.be(expectedValueLiteral);
      });

      it('should have the property permission (base name: "permission")', function() {
        // TODO: update the code to test the property permission
        expect(instance).to.have.property('permission');
        // expect(instance.permission).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property propagateDependencies (base name: "propagateDependencies")', function() {
        // TODO: update the code to test the property propagateDependencies
        expect(instance).to.have.property('propagateDependencies');
        // expect(instance.propagateDependencies).to.be(expectedValueLiteral);
      });

      it('should have the property propagateSuspect (base name: "propagateSuspect")', function() {
        // TODO: update the code to test the property propagateSuspect
        expect(instance).to.have.property('propagateSuspect');
        // expect(instance.propagateSuspect).to.be(expectedValueLiteral);
      });

      it('should have the property referenceId (base name: "referenceId")', function() {
        // TODO: update the code to test the property referenceId
        expect(instance).to.have.property('referenceId');
        // expect(instance.referenceId).to.be(expectedValueLiteral);
      });

      it('should have the property reversedSuspect (base name: "reversedSuspect")', function() {
        // TODO: update the code to test the property reversedSuspect
        expect(instance).to.have.property('reversedSuspect');
        // expect(instance.reversedSuspect).to.be(expectedValueLiteral);
      });

      it('should have the property serviceDeskField (base name: "serviceDeskField")', function() {
        // TODO: update the code to test the property serviceDeskField
        expect(instance).to.have.property('serviceDeskField');
        // expect(instance.serviceDeskField).to.be(expectedValueLiteral);
      });

      it('should have the property span (base name: "span")', function() {
        // TODO: update the code to test the property span
        expect(instance).to.have.property('span');
        // expect(instance.span).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property typeId (base name: "typeId")', function() {
        // TODO: update the code to test the property typeId
        expect(instance).to.have.property('typeId');
        // expect(instance.typeId).to.be(expectedValueLiteral);
      });

      it('should have the property union (base name: "union")', function() {
        // TODO: update the code to test the property union
        expect(instance).to.have.property('union');
        // expect(instance.union).to.be(expectedValueLiteral);
      });

      it('should have the property width (base name: "width")', function() {
        // TODO: update the code to test the property width
        expect(instance).to.have.property('width');
        // expect(instance.width).to.be(expectedValueLiteral);
      });

    });
  });

}));
