/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import PermissionIdsRequest from '../model/PermissionIdsRequest';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import RestException from '../model/RestException';
import RoleWithPermissions from '../model/RoleWithPermissions';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerPermission from '../model/TrackerPermission';
import TrackerPermissionReference from '../model/TrackerPermissionReference';

/**
* TrackerPermission service.
* @module api/TrackerPermissionApi
* @version 3.0
*/
export default class TrackerPermissionApi {

    /**
    * Constructs a new TrackerPermissionApi. 
    * @alias module:api/TrackerPermissionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getTrackerPermission operation.
     * @callback moduleapi/TrackerPermissionApi~getTrackerPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerPermission{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the immutable definition of a tracker permission
     * @param {Number} trackerPermissionId 
     * @param {module:api/TrackerPermissionApi~getTrackerPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerPermission(trackerPermissionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerPermissionId' is set
      if (trackerPermissionId === undefined || trackerPermissionId === null) {
        throw new Error("Missing the required parameter 'trackerPermissionId' when calling getTrackerPermission");
      }

      let pathParams = {
        'trackerPermissionId': trackerPermissionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = TrackerPermission;

      return this.apiClient.callApi(
        '/v3/trackers/permissions/{trackerPermissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerPermissions operation.
     * @callback moduleapi/TrackerPermissionApi~getTrackerPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerPermissionReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available tracker permissions
     * @param {module:api/TrackerPermissionApi~getTrackerPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerPermissions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [TrackerPermissionReference];

      return this.apiClient.callApi(
        '/v3/trackers/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerPermissionsWithRoles operation.
     * @callback moduleapi/TrackerPermissionApi~getTrackerPermissionsWithRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleWithPermissions>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tracker permissions per role
     * API can be used to list tracker permissions per roles, filtering is possible by user, user and on of the user&#x27;s role, or just by role
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.userId 
     * @param {Number} opts.roleId 
     * @param {module:api/TrackerPermissionApi~getTrackerPermissionsWithRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerPermissionsWithRoles(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerPermissionsWithRoles");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'userId': opts['userId'],'roleId': opts['roleId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleWithPermissions];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removePermissions operation.
     * @callback moduleapi/TrackerPermissionApi~removePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes all tracker permissions from a specific role
     * @param {Number} trackerId 
     * @param {Number} roleId 
     * @param {module:api/TrackerPermissionApi~removePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removePermissions(trackerId, roleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling removePermissions");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling removePermissions");
      }

      let pathParams = {
        'trackerId': trackerId,'roleId': roleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/roles/{roleId}/permissions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePermission operation.
     * @callback moduleapi/TrackerPermissionApi~updatePermissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleWithPermissions>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the tracker permissions for a specific role
     * @param {module:model/PermissionIdsRequest} body 
     * @param {Number} trackerId 
     * @param {Number} roleId 
     * @param {module:api/TrackerPermissionApi~updatePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePermission(body, trackerId, roleId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePermission");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling updatePermission");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updatePermission");
      }

      let pathParams = {
        'trackerId': trackerId,'roleId': roleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = [RoleWithPermissions];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/roles/{roleId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}