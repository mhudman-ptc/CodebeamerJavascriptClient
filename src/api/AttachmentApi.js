/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ArtifactRevisionSearchResult from '../model/ArtifactRevisionSearchResult';
import Attachment from '../model/Attachment';
import BadRequestException from '../model/BadRequestException';
import InternalServerErrorException from '../model/InternalServerErrorException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* Attachment service.
* @module api/AttachmentApi
* @version 3.0
*/
export default class AttachmentApi {

    /**
    * Constructs a new AttachmentApi. 
    * @alias module:api/AttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteAttachment operation.
     * @callback moduleapi/AttachmentApi~deleteAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an attachment
     * @param {Number} attachmentId 
     * @param {module:api/AttachmentApi~deleteAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttachment(attachmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling deleteAttachment");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAttachment operation.
     * @callback moduleapi/AttachmentApi~getAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachment by id
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.version 
     * @param {module:api/AttachmentApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAttachment(attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getAttachment");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAttachmentContent operation.
     * @callback moduleapi/AttachmentApi~getAttachmentContentCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get content of an attachment by id
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.version 
     * @param {module:api/AttachmentApi~getAttachmentContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAttachmentContent(attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getAttachmentContent");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', '*/*'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAttachmentHistory operation.
     * @callback moduleapi/AttachmentApi~getAttachmentHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactRevisionSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the change history of the specified attachment
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/AttachmentApi~getAttachmentHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAttachmentHistory(attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getAttachmentHistory");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactRevisionSearchResult;

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the restoreAttachment operation.
     * @callback moduleapi/AttachmentApi~restoreAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore attachment to previous version
     * @param {Number} attachmentId 
     * @param {Number} version 
     * @param {module:api/AttachmentApi~restoreAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    restoreAttachment(attachmentId, version, callback) {
      
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling restoreAttachment");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling restoreAttachment");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        'version': version
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}/restore', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAttachment operation.
     * @callback moduleapi/AttachmentApi~updateAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update attachment
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.content 
     * @param {String} opts.description 
     * @param {module:model/String} opts.descriptionFormat 
     * @param {module:api/AttachmentApi~updateAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateAttachment(attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling updateAttachment");
      }

      let pathParams = {
        'attachmentId': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'content': opts['content'],'description': opts['description'],'descriptionFormat': opts['descriptionFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', '*/*'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/attachments/{attachmentId}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}