/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AccessPermission from '../model/AccessPermission';
import AccessPermissionsRequest from '../model/AccessPermissionsRequest';
import ArtifactRevisionSearchResult from '../model/ArtifactRevisionSearchResult';
import BadRequestException from '../model/BadRequestException';
import LockInfo from '../model/LockInfo';
import LockRequest from '../model/LockRequest';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import WikiPage from '../model/WikiPage';
import WikiRenderRequest from '../model/WikiRenderRequest';

/**
* Wiki service.
* @module api/WikiApi
* @version 3.0
*/
export default class WikiApi {

    /**
    * Constructs a new WikiApi. 
    * @alias module:api/WikiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the checkWikiPageLock operation.
     * @callback moduleapi/WikiApi~checkWikiPageLockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a wiki page is locked, and if it is, retrieve the details of the lock
     * @param {Number} wikiId Wiki page id
     * @param {module:api/WikiApi~checkWikiPageLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    checkWikiPageLock(wikiId, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling checkWikiPageLock");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = LockInfo;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createWikiPage operation.
     * @callback moduleapi/WikiApi~createWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new wiki page
     * @param {module:model/WikiPage} body 
     * @param {module:api/WikiApi~createWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createWikiPage(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createWikiPage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WikiPage;

      return this.apiClient.callApi(
        '/v3/wikipages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteWikiPage operation.
     * @callback moduleapi/WikiApi~deleteWikiPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a wiki page by its ID
     * @param {Number} wikiId ID of the wiki page
     * @param {module:api/WikiApi~deleteWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWikiPage(wikiId, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling deleteWikiPage");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWikiPage operation.
     * @callback moduleapi/WikiApi~getWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wiki page
     * @param {Number} wikiId ID of the wiki page
     * @param {Object} opts Optional parameters
     * @param {Number} opts.version Version of the wiki page
     * @param {module:api/WikiApi~getWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWikiPage(wikiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling getWikiPage");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = WikiPage;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWikiPageHistory operation.
     * @callback moduleapi/WikiApi~getWikiPageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactRevisionSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the change history of the specified wiki page
     * @param {Number} wikiId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/WikiApi~getWikiPageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWikiPageHistory(wikiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling getWikiPageHistory");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ArtifactRevisionSearchResult;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWikiPermissions operation.
     * @callback moduleapi/WikiApi~getWikiPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessPermission>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions of a wiki page
     * @param {Number} wikiId Wiki page id
     * @param {module:api/WikiApi~getWikiPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWikiPermissions(wikiId, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling getWikiPermissions");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [AccessPermission];

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the lockWikiPage operation.
     * @callback moduleapi/WikiApi~lockWikiPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock a wiki page
     * @param {module:model/LockRequest} body 
     * @param {Number} wikiId Wiki page id
     * @param {module:api/WikiApi~lockWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lockWikiPage(body, wikiId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lockWikiPage");
      }
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling lockWikiPage");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the renderWikiMarkup operation.
     * @callback moduleapi/WikiApi~renderWikiMarkupCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a wiki page as HTML in a specific context
     * @param {module:model/WikiRenderRequest} body 
     * @param {Number} projectId 
     * @param {module:api/WikiApi~renderWikiMarkupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    renderWikiMarkup(body, projectId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling renderWikiMarkup");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling renderWikiMarkup");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/wiki2html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the renderWikiPage operation.
     * @callback moduleapi/WikiApi~renderWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render a wiki page as HTML
     * @param {Number} wikiId ID of the wiki page
     * @param {Object} opts Optional parameters
     * @param {Number} opts.version version of the wiki page
     * @param {module:api/WikiApi~renderWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    renderWikiPage(wikiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling renderWikiPage");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/html'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the restoreWikiPageContent operation.
     * @callback moduleapi/WikiApi~restoreWikiPageContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores the content from a previous version of a wiki page
     * @param {Number} wikiId Wiki page id
     * @param {Number} version The version to be restored
     * @param {module:api/WikiApi~restoreWikiPageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    restoreWikiPageContent(wikiId, version, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling restoreWikiPageContent");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling restoreWikiPageContent");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'version': version
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = WikiPage;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/restorecontent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setWikiPermissions operation.
     * @callback moduleapi/WikiApi~setWikiPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessPermission>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set permissions of a wiki page
     * @param {module:model/AccessPermissionsRequest} body 
     * @param {Number} wikiId Wiki page id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.recursive Set permissions of children recursively (default to <.>)
     * @param {module:api/WikiApi~setWikiPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    setWikiPermissions(body, wikiId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setWikiPermissions");
      }
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling setWikiPermissions");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'recursive': opts['recursive']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AccessPermission];

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unlockWikiPage operation.
     * @callback moduleapi/WikiApi~unlockWikiPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock a wiki page
     * @param {Number} wikiId Wiki page id
     * @param {module:api/WikiApi~unlockWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlockWikiPage(wikiId, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling unlockWikiPage");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateWikiPage operation.
     * @callback moduleapi/WikiApi~updateWikiPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update and/or move a wiki page
     * @param {module:model/WikiPage} body 
     * @param {Number} itemId Id of the wiki page to update
     * @param {module:api/WikiApi~updateWikiPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateWikiPage(body, itemId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWikiPage");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateWikiPage");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WikiPage;

      return this.apiClient.callApi(
        '/v3/wikipages/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}