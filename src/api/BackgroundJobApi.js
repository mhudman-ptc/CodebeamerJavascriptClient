/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BackgroundJob from '../model/BackgroundJob';
import BadRequestException from '../model/BadRequestException';
import InternalServerErrorException from '../model/InternalServerErrorException';
import JobReference from '../model/JobReference';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import WorkingSetUpdateRequest from '../model/WorkingSetUpdateRequest';

/**
* BackgroundJob service.
* @module api/BackgroundJobApi
* @version 3.0
*/
export default class BackgroundJobApi {

    /**
    * Constructs a new BackgroundJobApi. 
    * @alias module:api/BackgroundJobApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getBackgroundJob operation.
     * @callback moduleapi/BackgroundJobApi~getBackgroundJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackgroundJob{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve background job information
     * @param {Number} jobId 
     * @param {module:api/BackgroundJobApi~getBackgroundJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBackgroundJob(jobId, callback) {
      
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getBackgroundJob");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = BackgroundJob;

      return this.apiClient.callApi(
        '/v3/job/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateWorkingSet operation.
     * @callback moduleapi/BackgroundJobApi~updateWorkingSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create background job to update working-set
     * This API can be used start a Job that merges changes from the source into the target Working-Set replacing the content of the specified target trackers completely.
     * @param {module:model/WorkingSetUpdateRequest} body 
     * @param {module:api/BackgroundJobApi~updateWorkingSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateWorkingSet(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateWorkingSet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobReference;

      return this.apiClient.callApi(
        '/v3/jobs/working-set-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}