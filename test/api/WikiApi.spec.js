/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CodebeamerSwaggerApi.WikiApi();
  });

  describe('(package)', function() {
    describe('WikiApi', function() {
      describe('checkWikiPageLock', function() {
        it('should call checkWikiPageLock successfully', function(done) {
          // TODO: uncomment, update parameter values for checkWikiPageLock call and complete the assertions
          /*

          instance.checkWikiPageLock(wikiId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.LockInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createWikiPage', function() {
        it('should call createWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for createWikiPage call and complete the assertions
          /*

          instance.createWikiPage(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.WikiPage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteWikiPage', function() {
        it('should call deleteWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWikiPage call
          /*

          instance.deleteWikiPage(wikiId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWikiPage', function() {
        it('should call getWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for getWikiPage call and complete the assertions
          /*
          var opts = {};

          instance.getWikiPage(wikiId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.WikiPage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWikiPageHistory', function() {
        it('should call getWikiPageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getWikiPageHistory call and complete the assertions
          /*
          var opts = {};

          instance.getWikiPageHistory(wikiId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.ArtifactRevisionSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getWikiPermissions', function() {
        it('should call getWikiPermissions successfully', function(done) {
          // TODO: uncomment, update parameter values for getWikiPermissions call and complete the assertions
          /*

          instance.getWikiPermissions(wikiId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.AccessPermission);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('lockWikiPage', function() {
        it('should call lockWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for lockWikiPage call
          /*

          instance.lockWikiPage(body, wikiId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renderWikiMarkup', function() {
        it('should call renderWikiMarkup successfully', function(done) {
          // TODO: uncomment, update parameter values for renderWikiMarkup call and complete the assertions
          /*

          instance.renderWikiMarkup(body, projectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renderWikiPage', function() {
        it('should call renderWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for renderWikiPage call and complete the assertions
          /*
          var opts = {};

          instance.renderWikiPage(wikiId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreWikiPageContent', function() {
        it('should call restoreWikiPageContent successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreWikiPageContent call and complete the assertions
          /*

          instance.restoreWikiPageContent(wikiId, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.WikiPage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setWikiPermissions', function() {
        it('should call setWikiPermissions successfully', function(done) {
          // TODO: uncomment, update parameter values for setWikiPermissions call and complete the assertions
          /*
          var opts = {};

          instance.setWikiPermissions(body, wikiId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.AccessPermission);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unlockWikiPage', function() {
        it('should call unlockWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for unlockWikiPage call
          /*

          instance.unlockWikiPage(wikiId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateWikiPage', function() {
        it('should call updateWikiPage successfully', function(done) {
          // TODO: uncomment, update parameter values for updateWikiPage call and complete the assertions
          /*

          instance.updateWikiPage(body, itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.WikiPage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
