/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import DeployProject from '../model/DeployProject';
import InternalServerErrorException from '../model/InternalServerErrorException';
import MemberReferenceSearchResult from '../model/MemberReferenceSearchResult';
import Project from '../model/Project';
import ProjectFilteringRequest from '../model/ProjectFilteringRequest';
import ProjectMemberPermissions from '../model/ProjectMemberPermissions';
import ProjectReference from '../model/ProjectReference';
import ProjectSearchResult from '../model/ProjectSearchResult';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import Tracker from '../model/Tracker';
import TrackerFilteringRequest from '../model/TrackerFilteringRequest';
import TrackerReference from '../model/TrackerReference';
import TrackerSearchResult from '../model/TrackerSearchResult';
import WikiOutlineSearchResult from '../model/WikiOutlineSearchResult';

/**
* Project service.
* @module api/ProjectApi
* @version 3.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createTracker operation.
     * @callback moduleapi/ProjectApi~createTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tracker{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tracker
     * @param {module:model/Tracker} body 
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.templateId Identifier of the template tracker.
     * @param {module:api/ProjectApi~createTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTracker(body, projectId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTracker");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createTracker");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'templateId': opts['templateId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tracker;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/trackers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deployConfiguration operation.
     * @callback moduleapi/ProjectApi~deployConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a project configuration to a Project
     * The configuration file needs to be uploaded to codebeamer Documents
     * @param {module:model/DeployProject} body 
     * @param {module:api/ProjectApi~deployConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deployConfiguration(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deployConfiguration");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;

      return this.apiClient.callApi(
        '/v3/projects/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMembersOfProject operation.
     * @callback moduleapi/ProjectApi~getMembersOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all members of a project
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/ProjectApi~getMembersOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMembersOfProject(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMembersOfProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = MemberReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectById operation.
     * @callback moduleapi/ProjectApi~getProjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project
     * @param {Number} projectId 
     * @param {module:api/ProjectApi~getProjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectById(projectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectById");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Project;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectRolesOfMember operation.
     * @callback moduleapi/ProjectApi~getProjectRolesOfMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectMemberPermissions{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all roles the user has on a project
     * @param {Number} projectId 
     * @param {Number} userId 
     * @param {module:api/ProjectApi~getProjectRolesOfMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectRolesOfMember(projectId, userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectRolesOfMember");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectRolesOfMember");
      }

      let pathParams = {
        'projectId': projectId,'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ProjectMemberPermissions;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/members/{userId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback moduleapi/ProjectApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects
     * @param {module:api/ProjectApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjects(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [ProjectReference];

      return this.apiClient.callApi(
        '/v3/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTopLevelWikiPages operation.
     * @callback moduleapi/ProjectApi~getTopLevelWikiPagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WikiOutlineSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wiki pages of a project
     * @param {Number} projectId ID of the project
     * @param {module:api/ProjectApi~getTopLevelWikiPagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTopLevelWikiPages(projectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTopLevelWikiPages");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = WikiOutlineSearchResult;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/wikipages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackers operation.
     * @callback moduleapi/ProjectApi~getTrackersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get trackers
     * @param {Number} projectId 
     * @param {module:api/ProjectApi~getTrackersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackers(projectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTrackers");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackerReference];

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/trackers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchAllTrackersInProject operation.
     * @callback moduleapi/ProjectApi~searchAllTrackersInProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of all trackers in a project
     * @param {module:model/TrackerFilteringRequest} body 
     * @param {Number} projectId 
     * @param {module:api/ProjectApi~searchAllTrackersInProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchAllTrackersInProject(body, projectId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchAllTrackersInProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling searchAllTrackersInProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerSearchResult;

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/trackers/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchProjects operation.
     * @callback moduleapi/ProjectApi~searchProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search projects by given criteria
     * @param {module:model/ProjectFilteringRequest} body 
     * @param {module:api/ProjectApi~searchProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchProjects(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchProjects");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectSearchResult;

      return this.apiClient.callApi(
        '/v3/projects/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}