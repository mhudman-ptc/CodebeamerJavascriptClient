/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerItemAttachmentRequest', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerItemAttachmentRequest();
      });

      it('should create an instance of TrackerItemAttachmentRequest', function() {
        // TODO: update the code to test TrackerItemAttachmentRequest
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerItemAttachmentRequest);
      });

      it('should have the property baselineId (base name: "baselineId")', function() {
        // TODO: update the code to test the property baselineId
        expect(instance).to.have.property('baselineId');
        // expect(instance.baselineId).to.be(expectedValueLiteral);
      });

      it('should have the property excludeFilter (base name: "excludeFilter")', function() {
        // TODO: update the code to test the property excludeFilter
        expect(instance).to.have.property('excludeFilter');
        // expect(instance.excludeFilter).to.be(expectedValueLiteral);
      });

      it('should have the property extensions (base name: "extensions")', function() {
        // TODO: update the code to test the property extensions
        expect(instance).to.have.property('extensions');
        // expect(instance.extensions).to.be(expectedValueLiteral);
      });

      it('should have the property mimeTypes (base name: "mimeTypes")', function() {
        // TODO: update the code to test the property mimeTypes
        expect(instance).to.have.property('mimeTypes');
        // expect(instance.mimeTypes).to.be(expectedValueLiteral);
      });

    });
  });

}));
