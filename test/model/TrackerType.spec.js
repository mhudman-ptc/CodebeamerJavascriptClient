/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerType', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerType();
      });

      it('should create an instance of TrackerType', function() {
        // TODO: update the code to test TrackerType
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerType);
      });

      it('should have the property branchable (base name: "branchable")', function() {
        // TODO: update the code to test the property branchable
        expect(instance).to.have.property('branchable');
        // expect(instance.branchable).to.be(expectedValueLiteral);
      });

      it('should have the property color (base name: "color")', function() {
        // TODO: update the code to test the property color
        expect(instance).to.have.property('color');
        // expect(instance.color).to.be(expectedValueLiteral);
      });

      it('should have the property docEditView (base name: "docEditView")', function() {
        // TODO: update the code to test the property docEditView
        expect(instance).to.have.property('docEditView');
        // expect(instance.docEditView).to.be(expectedValueLiteral);
      });

      it('should have the property editorUrl (base name: "editorUrl")', function() {
        // TODO: update the code to test the property editorUrl
        expect(instance).to.have.property('editorUrl');
        // expect(instance.editorUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property itemIconUrl (base name: "itemIconUrl")', function() {
        // TODO: update the code to test the property itemIconUrl
        expect(instance).to.have.property('itemIconUrl');
        // expect(instance.itemIconUrl).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property outline (base name: "outline")', function() {
        // TODO: update the code to test the property outline
        expect(instance).to.have.property('outline');
        // expect(instance.outline).to.be(expectedValueLiteral);
      });

      it('should have the property trackerIconUrl (base name: "trackerIconUrl")', function() {
        // TODO: update the code to test the property trackerIconUrl
        expect(instance).to.have.property('trackerIconUrl');
        // expect(instance.trackerIconUrl).to.be(expectedValueLiteral);
      });

      it('should have the property urlLinkFormat (base name: "urlLinkFormat")', function() {
        // TODO: update the code to test the property urlLinkFormat
        expect(instance).to.have.property('urlLinkFormat');
        // expect(instance.urlLinkFormat).to.be(expectedValueLiteral);
      });

      it('should have the property varName (base name: "varName")', function() {
        // TODO: update the code to test the property varName
        expect(instance).to.have.property('varName');
        // expect(instance.varName).to.be(expectedValueLiteral);
      });

    });
  });

}));
