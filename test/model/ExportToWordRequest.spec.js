/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExportToWordRequest', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.ExportToWordRequest();
      });

      it('should create an instance of ExportToWordRequest', function() {
        // TODO: update the code to test ExportToWordRequest
        expect(instance).to.be.a(CodebeamerSwaggerApi.ExportToWordRequest);
      });

      it('should have the property currentItemAndItsChildren (base name: "currentItemAndItsChildren")', function() {
        // TODO: update the code to test the property currentItemAndItsChildren
        expect(instance).to.have.property('currentItemAndItsChildren');
        // expect(instance.currentItemAndItsChildren).to.be(expectedValueLiteral);
      });

      it('should have the property currentItemId (base name: "currentItemId")', function() {
        // TODO: update the code to test the property currentItemId
        expect(instance).to.have.property('currentItemId');
        // expect(instance.currentItemId).to.be(expectedValueLiteral);
      });

      it('should have the property exportTargetTrackerFolderId (base name: "exportTargetTrackerFolderId")', function() {
        // TODO: update the code to test the property exportTargetTrackerFolderId
        expect(instance).to.have.property('exportTargetTrackerFolderId');
        // expect(instance.exportTargetTrackerFolderId).to.be(expectedValueLiteral);
      });

      it('should have the property exportTargetTrackerId (base name: "exportTargetTrackerId")', function() {
        // TODO: update the code to test the property exportTargetTrackerId
        expect(instance).to.have.property('exportTargetTrackerId');
        // expect(instance.exportTargetTrackerId).to.be(expectedValueLiteral);
      });

      it('should have the property newVersion (base name: "newVersion")', function() {
        // TODO: update the code to test the property newVersion
        expect(instance).to.have.property('newVersion');
        // expect(instance.newVersion).to.be(expectedValueLiteral);
      });

      it('should have the property reportId (base name: "reportId")', function() {
        // TODO: update the code to test the property reportId
        expect(instance).to.have.property('reportId');
        // expect(instance.reportId).to.be(expectedValueLiteral);
      });

      it('should have the property wordFilename (base name: "wordFilename")', function() {
        // TODO: update the code to test the property wordFilename
        expect(instance).to.have.property('wordFilename');
        // expect(instance.wordFilename).to.be(expectedValueLiteral);
      });

      it('should have the property wordTemplateName (base name: "wordTemplateName")', function() {
        // TODO: update the code to test the property wordTemplateName
        expect(instance).to.have.property('wordTemplateName');
        // expect(instance.wordTemplateName).to.be(expectedValueLiteral);
      });

    });
  });

}));
