/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The AbstractFieldValue model module.
 * @module model/AbstractFieldValue
 * @version 3.0
 */
export default class AbstractFieldValue {
  /**
   * Constructs a new <code>AbstractFieldValue</code>.
   * Value container of a field
   * @alias module:model/AbstractFieldValue
   * @class
   * @param type {String} Type of the field
   */
  constructor(type) {
    this.type = type;
  }

  /**
   * Constructs a <code>AbstractFieldValue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AbstractFieldValue} obj Optional instance to populate.
   * @return {module:model/AbstractFieldValue} The populated <code>AbstractFieldValue</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AbstractFieldValue();
      if (data.hasOwnProperty('fieldId'))
        obj.fieldId = ApiClient.convertToType(data['fieldId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('sharedFieldName'))
        obj.sharedFieldName = ApiClient.convertToType(data['sharedFieldName'], 'String');
      if (data.hasOwnProperty('sharedFieldNames'))
        obj.sharedFieldNames = ApiClient.convertToType(data['sharedFieldNames'], ['String']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
    }
    return obj;
  }
}

/**
 * Id of the field
 * @member {Number} fieldId
 */
AbstractFieldValue.prototype.fieldId = undefined;

/**
 * Name of the field
 * @member {String} name
 */
AbstractFieldValue.prototype.name = undefined;

/**
 * The name of a shared field assigned to the field. This can be specified as an alternative to fieldId.
 * @member {String} sharedFieldName
 */
AbstractFieldValue.prototype.sharedFieldName = undefined;

/**
 * The names of a shared fields assigned to the field.
 * @member {Array.<String>} sharedFieldNames
 */
AbstractFieldValue.prototype.sharedFieldNames = undefined;

/**
 * Type of the field
 * @member {String} type
 */
AbstractFieldValue.prototype.type = undefined;

