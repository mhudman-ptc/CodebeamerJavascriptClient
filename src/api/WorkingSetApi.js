/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import InternalServerErrorException from '../model/InternalServerErrorException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerWorkingSet from '../model/TrackerWorkingSet';
import WorkingSetInformation from '../model/WorkingSetInformation';
import WorkingSetItemMapping from '../model/WorkingSetItemMapping';
import WorkingSetItemsMappingRequest from '../model/WorkingSetItemsMappingRequest';
import WorkingSetMinimal from '../model/WorkingSetMinimal';
import WorkingSetTracker from '../model/WorkingSetTracker';

/**
* WorkingSet service.
* @module api/WorkingSetApi
* @version 3.0
*/
export default class WorkingSetApi {

    /**
    * Constructs a new WorkingSetApi. 
    * @alias module:api/WorkingSetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getItemsMappingInWorkingSet operation.
     * @callback moduleapi/WorkingSetApi~getItemsMappingInWorkingSetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkingSetItemMapping>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Maps Tracker Items in Working-Set
     * Maps Tracker Items to the corresponding Tracker Items in target Working-Set.
     * @param {module:model/WorkingSetItemsMappingRequest} body 
     * @param {module:api/WorkingSetApi~getItemsMappingInWorkingSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getItemsMappingInWorkingSet(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getItemsMappingInWorkingSet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkingSetItemMapping];

      return this.apiClient.callApi(
        '/v3/working-sets/items-mapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerWorkingSets operation.
     * @callback moduleapi/WorkingSetApi~getTrackerWorkingSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerWorkingSet>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists Working-Sets
     * Lists Working-Sets that contain the given Tracker or Branch.
     * @param {Number} trackerId Tracker or Branch id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted Find Tracker or Branch if deleted and the result contains the deleted Working-Sets
     * @param {module:api/WorkingSetApi~getTrackerWorkingSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerWorkingSets(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerWorkingSets");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackerWorkingSet];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/working-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWorkingSetInformation operation.
     * @callback moduleapi/WorkingSetApi~getWorkingSetInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkingSetInformation{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Working-Set information
     * Gets the Working-Set information for the given id.
     * @param {Number} workingSetId Id of the Working-Set
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted The result contains the deleted Working-Sets
     * @param {module:api/WorkingSetApi~getWorkingSetInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWorkingSetInformation(workingSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workingSetId' is set
      if (workingSetId === undefined || workingSetId === null) {
        throw new Error("Missing the required parameter 'workingSetId' when calling getWorkingSetInformation");
      }

      let pathParams = {
        'workingSetId': workingSetId
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkingSetInformation;

      return this.apiClient.callApi(
        '/v3/working-sets/{workingSetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getWorkingSetTrackers operation.
     * @callback moduleapi/WorkingSetApi~getWorkingSetTrackersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkingSetTracker>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists the trackers in a Working-Set
     * Lists the trackers (shared and included) in the given Working-Set.
     * @param {Number} workingSetId Working-Set id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted The result contains the deleted Trackers
     * @param {module:api/WorkingSetApi~getWorkingSetTrackersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getWorkingSetTrackers(workingSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workingSetId' is set
      if (workingSetId === undefined || workingSetId === null) {
        throw new Error("Missing the required parameter 'workingSetId' when calling getWorkingSetTrackers");
      }

      let pathParams = {
        'workingSetId': workingSetId
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkingSetTracker];

      return this.apiClient.callApi(
        '/v3/working-sets/{workingSetId}/trackers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listWorkingSetsOfProject operation.
     * @callback moduleapi/WorkingSetApi~listWorkingSetsOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkingSetMinimal>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project level Working-Sets information
     * Lists top-level Working-Sets minimal information for the given project.
     * @param {Number} projectId The id of the project
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeDeleted The result lists the deleted Working-Sets
     * @param {module:api/WorkingSetApi~listWorkingSetsOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listWorkingSetsOfProject(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling listWorkingSetsOfProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkingSetMinimal];

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/working-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}