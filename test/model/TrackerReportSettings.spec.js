/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerReportSettings', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerReportSettings();
      });

      it('should create an instance of TrackerReportSettings', function() {
        // TODO: update the code to test TrackerReportSettings
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerReportSettings);
      });

      it('should have the property cbQl (base name: "cbQl")', function() {
        // TODO: update the code to test the property cbQl
        expect(instance).to.have.property('cbQl');
        // expect(instance.cbQl).to.be(expectedValueLiteral);
      });

      it('should have the property columns (base name: "columns")', function() {
        // TODO: update the code to test the property columns
        expect(instance).to.have.property('columns');
        // expect(instance.columns).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property isPublic (base name: "isPublic")', function() {
        // TODO: update the code to test the property isPublic
        expect(instance).to.have.property('isPublic');
        // expect(instance.isPublic).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property referenceLevelSettings (base name: "referenceLevelSettings")', function() {
        // TODO: update the code to test the property referenceLevelSettings
        expect(instance).to.have.property('referenceLevelSettings');
        // expect(instance.referenceLevelSettings).to.be(expectedValueLiteral);
      });

      it('should have the property renderingMethod (base name: "renderingMethod")', function() {
        // TODO: update the code to test the property renderingMethod
        expect(instance).to.have.property('renderingMethod');
        // expect(instance.renderingMethod).to.be(expectedValueLiteral);
      });

      it('should have the property reportId (base name: "reportId")', function() {
        // TODO: update the code to test the property reportId
        expect(instance).to.have.property('reportId');
        // expect(instance.reportId).to.be(expectedValueLiteral);
      });

      it('should have the property showAllChildren (base name: "showAllChildren")', function() {
        // TODO: update the code to test the property showAllChildren
        expect(instance).to.have.property('showAllChildren');
        // expect(instance.showAllChildren).to.be(expectedValueLiteral);
      });

      it('should have the property showAncestors (base name: "showAncestors")', function() {
        // TODO: update the code to test the property showAncestors
        expect(instance).to.have.property('showAncestors');
        // expect(instance.showAncestors).to.be(expectedValueLiteral);
      });

      it('should have the property showDescendants (base name: "showDescendants")', function() {
        // TODO: update the code to test the property showDescendants
        expect(instance).to.have.property('showDescendants');
        // expect(instance.showDescendants).to.be(expectedValueLiteral);
      });

      it('should have the property tracker (base name: "tracker")', function() {
        // TODO: update the code to test the property tracker
        expect(instance).to.have.property('tracker');
        // expect(instance.tracker).to.be(expectedValueLiteral);
      });

    });
  });

}));
