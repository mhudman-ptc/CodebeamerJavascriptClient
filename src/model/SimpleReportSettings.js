/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import ReportPermission from './ReportPermission';
import ResizableReportColumnSettings from './ResizableReportColumnSettings';

/**
 * The SimpleReportSettings model module.
 * @module model/SimpleReportSettings
 * @version 3.0
 */
export default class SimpleReportSettings {
  /**
   * Constructs a new <code>SimpleReportSettings</code>.
   * Settings for a simple report.
   * @alias module:model/SimpleReportSettings
   * @class
   * @param cbQl {String} CbQL query string of the report.
   * @param columns {Array.<module:model/ResizableReportColumnSettings>} Column definitions.
   * @param description {String} Description of the report.
   * @param name {String} Name of the report.
   */
  constructor(cbQl, columns, description, name) {
    this.cbQl = cbQl;
    this.columns = columns;
    this.description = description;
    this.name = name;
  }

  /**
   * Constructs a <code>SimpleReportSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SimpleReportSettings} obj Optional instance to populate.
   * @return {module:model/SimpleReportSettings} The populated <code>SimpleReportSettings</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SimpleReportSettings();
      if (data.hasOwnProperty('addedPermissions'))
        obj.addedPermissions = ApiClient.convertToType(data['addedPermissions'], [ReportPermission]);
      if (data.hasOwnProperty('cbQl'))
        obj.cbQl = ApiClient.convertToType(data['cbQl'], 'String');
      if (data.hasOwnProperty('columns'))
        obj.columns = ApiClient.convertToType(data['columns'], [ResizableReportColumnSettings]);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('reportId'))
        obj.reportId = ApiClient.convertToType(data['reportId'], 'Number');
      if (data.hasOwnProperty('showAllChildren'))
        obj.showAllChildren = ApiClient.convertToType(data['showAllChildren'], 'Boolean');
      if (data.hasOwnProperty('showAncestors'))
        obj.showAncestors = ApiClient.convertToType(data['showAncestors'], 'Boolean');
      if (data.hasOwnProperty('showDescendants'))
        obj.showDescendants = ApiClient.convertToType(data['showDescendants'], 'Boolean');
    }
    return obj;
  }
}

/**
 * Access permissions for the report.
 * @member {Array.<module:model/ReportPermission>} addedPermissions
 */
SimpleReportSettings.prototype.addedPermissions = undefined;

/**
 * CbQL query string of the report.
 * @member {String} cbQl
 */
SimpleReportSettings.prototype.cbQl = undefined;

/**
 * Column definitions.
 * @member {Array.<module:model/ResizableReportColumnSettings>} columns
 */
SimpleReportSettings.prototype.columns = undefined;

/**
 * Description of the report.
 * @member {String} description
 */
SimpleReportSettings.prototype.description = undefined;

/**
 * Name of the report.
 * @member {String} name
 */
SimpleReportSettings.prototype.name = undefined;

/**
 * Id of a report
 * @member {Number} reportId
 */
SimpleReportSettings.prototype.reportId = undefined;

/**
 * Indicator to ability to collapse/expand all child items.
 * @member {Boolean} showAllChildren
 */
SimpleReportSettings.prototype.showAllChildren = undefined;

/**
 * Indicator to show the ancestors of a result item.
 * @member {Boolean} showAncestors
 */
SimpleReportSettings.prototype.showAncestors = undefined;

/**
 * Indicator to show the descendants of a result item.
 * @member {Boolean} showDescendants
 */
SimpleReportSettings.prototype.showDescendants = undefined;

