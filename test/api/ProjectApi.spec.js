/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CodebeamerSwaggerApi.ProjectApi();
  });

  describe('(package)', function() {
    describe('ProjectApi', function() {
      describe('createTracker', function() {
        it('should call createTracker successfully', function(done) {
          // TODO: uncomment, update parameter values for createTracker call and complete the assertions
          /*
          var opts = {};

          instance.createTracker(body, projectId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.Tracker);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deployConfiguration', function() {
        it('should call deployConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for deployConfiguration call and complete the assertions
          /*

          instance.deployConfiguration(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.Project);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMembersOfProject', function() {
        it('should call getMembersOfProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getMembersOfProject call and complete the assertions
          /*
          var opts = {};

          instance.getMembersOfProject(projectId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.MemberReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectById', function() {
        it('should call getProjectById successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectById call and complete the assertions
          /*

          instance.getProjectById(projectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.Project);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectRolesOfMember', function() {
        it('should call getProjectRolesOfMember successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectRolesOfMember call and complete the assertions
          /*

          instance.getProjectRolesOfMember(projectId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.ProjectMemberPermissions);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjects', function() {
        it('should call getProjects successfully', function(done) {
          // TODO: uncomment getProjects call and complete the assertions
          /*

          instance.getProjects(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.ProjectReference);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTopLevelWikiPages', function() {
        it('should call getTopLevelWikiPages successfully', function(done) {
          // TODO: uncomment, update parameter values for getTopLevelWikiPages call and complete the assertions
          /*

          instance.getTopLevelWikiPages(projectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.WikiOutlineSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackers', function() {
        it('should call getTrackers successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackers call and complete the assertions
          /*

          instance.getTrackers(projectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.TrackerReference);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchAllTrackersInProject', function() {
        it('should call searchAllTrackersInProject successfully', function(done) {
          // TODO: uncomment, update parameter values for searchAllTrackersInProject call and complete the assertions
          /*

          instance.searchAllTrackersInProject(body, projectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchProjects', function() {
        it('should call searchProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for searchProjects call and complete the assertions
          /*

          instance.searchProjects(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.ProjectSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
