/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExternalScmRepositoryRequest', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.ExternalScmRepositoryRequest();
      });

      it('should create an instance of ExternalScmRepositoryRequest', function() {
        // TODO: update the code to test ExternalScmRepositoryRequest
        expect(instance).to.be.a(CodebeamerSwaggerApi.ExternalScmRepositoryRequest);
      });

      it('should have the property accessTokenId (base name: "accessTokenId")', function() {
        // TODO: update the code to test the property accessTokenId
        expect(instance).to.have.property('accessTokenId');
        // expect(instance.accessTokenId).to.be(expectedValueLiteral);
      });

      it('should have the property accessTokenName (base name: "accessTokenName")', function() {
        // TODO: update the code to test the property accessTokenName
        expect(instance).to.have.property('accessTokenName');
        // expect(instance.accessTokenName).to.be(expectedValueLiteral);
      });

      it('should have the property accessTokenValue (base name: "accessTokenValue")', function() {
        // TODO: update the code to test the property accessTokenValue
        expect(instance).to.have.property('accessTokenValue');
        // expect(instance.accessTokenValue).to.be(expectedValueLiteral);
      });

      it('should have the property enablePatchSynchronization (base name: "enablePatchSynchronization")', function() {
        // TODO: update the code to test the property enablePatchSynchronization
        expect(instance).to.have.property('enablePatchSynchronization');
        // expect(instance.enablePatchSynchronization).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property ownerName (base name: "ownerName")', function() {
        // TODO: update the code to test the property ownerName
        expect(instance).to.have.property('ownerName');
        // expect(instance.ownerName).to.be(expectedValueLiteral);
      });

      it('should have the property projectName (base name: "projectName")', function() {
        // TODO: update the code to test the property projectName
        expect(instance).to.have.property('projectName');
        // expect(instance.projectName).to.be(expectedValueLiteral);
      });

      it('should have the property remoteApiUrl (base name: "remoteApiUrl")', function() {
        // TODO: update the code to test the property remoteApiUrl
        expect(instance).to.have.property('remoteApiUrl');
        // expect(instance.remoteApiUrl).to.be(expectedValueLiteral);
      });

      it('should have the property repositoryName (base name: "repositoryName")', function() {
        // TODO: update the code to test the property repositoryName
        expect(instance).to.have.property('repositoryName');
        // expect(instance.repositoryName).to.be(expectedValueLiteral);
      });

      it('should have the property scmType (base name: "scmType")', function() {
        // TODO: update the code to test the property scmType
        expect(instance).to.have.property('scmType');
        // expect(instance.scmType).to.be(expectedValueLiteral);
      });

      it('should have the property secretId (base name: "secretId")', function() {
        // TODO: update the code to test the property secretId
        expect(instance).to.have.property('secretId');
        // expect(instance.secretId).to.be(expectedValueLiteral);
      });

    });
  });

}));
