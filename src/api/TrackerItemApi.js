/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import BulkOperationResponse from '../model/BulkOperationResponse';
import InternalServerErrorException from '../model/InternalServerErrorException';
import LockInfo from '../model/LockInfo';
import LockRequest from '../model/LockRequest';
import ReferenceSearchResult from '../model/ReferenceSearchResult';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceLockedException from '../model/ResourceLockedException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerItem from '../model/TrackerItem';
import TrackerItemChildReference from '../model/TrackerItemChildReference';
import TrackerItemField from '../model/TrackerItemField';
import TrackerItemFieldAccessibilityList from '../model/TrackerItemFieldAccessibilityList';
import TrackerItemHistory from '../model/TrackerItemHistory';
import TrackerItemReferenceSearchResult from '../model/TrackerItemReferenceSearchResult';
import TrackerItemRelationsResult from '../model/TrackerItemRelationsResult';
import TrackerItemReview from '../model/TrackerItemReview';
import TrackerItemRevision from '../model/TrackerItemRevision';
import TrackerItemSearchRequest from '../model/TrackerItemSearchRequest';
import TrackerItemSearchResult from '../model/TrackerItemSearchResult';
import TrackerItemsRequest from '../model/TrackerItemsRequest';
import UpdateTrackerItemChildrenRequest from '../model/UpdateTrackerItemChildrenRequest';
import UpdateTrackerItemField from '../model/UpdateTrackerItemField';
import UpdateTrackerItemFieldWithItemId from '../model/UpdateTrackerItemFieldWithItemId';
import UpdateTrackerItemTableField from '../model/UpdateTrackerItemTableField';
import WorkflowTransition from '../model/WorkflowTransition';

/**
* TrackerItem service.
* @module api/TrackerItemApi
* @version 3.0
*/
export default class TrackerItemApi {

    /**
    * Constructs a new TrackerItemApi. 
    * @alias module:api/TrackerItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addChildToTracker operation.
     * @callback moduleapi/TrackerItemApi~addChildToTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemChildReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a child item to a tracker item
     * @param {module:model/TrackerItemRevision} body 
     * @param {Number} trackerId 
     * @param {module:api/TrackerItemApi~addChildToTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addChildToTracker(body, trackerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addChildToTracker");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling addChildToTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemChildReference;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addChildToTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~addChildToTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemChildReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a child item to a tracker item
     * @param {module:model/TrackerItemRevision} body 
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~addChildToTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addChildToTrackerItem(body, itemId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addChildToTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling addChildToTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemChildReference;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpdateTrackerItemFields operation.
     * @callback moduleapi/TrackerItemApi~bulkUpdateTrackerItemFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkOperationResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update fields of a tracker item
     * @param {Array.<module:model/UpdateTrackerItemFieldWithItemId>} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.atomic If it&#x27;s turned on the whole update will run in a single transaction. (default to <.>)
     * @param {module:api/TrackerItemApi~bulkUpdateTrackerItemFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpdateTrackerItemFields(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpdateTrackerItemFields");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'atomic': opts['atomic']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkOperationResponse;

      return this.apiClient.callApi(
        '/v3/items/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the checkTrackerItemLock operation.
     * @callback moduleapi/TrackerItemApi~checkTrackerItemLockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a tracker item is locked, and if it is, retrieve the details of the lock
     * @param {Number} itemId Tracker item id
     * @param {module:api/TrackerItemApi~checkTrackerItemLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    checkTrackerItemLock(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling checkTrackerItemLock");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LockInfo;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/lock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~createTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tracker item
     * @param {module:model/TrackerItem} body 
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentItemId 
     * @param {Number} opts.referenceItemId 
     * @param {module:model/String} opts.position 
     * @param {module:api/TrackerItemApi~createTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTrackerItem(body, trackerId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTrackerItem");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling createTrackerItem");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'parentItemId': opts['parentItemId'],'referenceItemId': opts['referenceItemId'],'position': opts['position']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~deleteTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move tracker item to trash
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~deleteTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTrackerItem(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findTrackerChildren operation.
     * @callback moduleapi/TrackerItemApi~findTrackerChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get child items of a tracker item
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~findTrackerChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findTrackerChildren(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling findTrackerChildren");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findTrackerItemChildren operation.
     * @callback moduleapi/TrackerItemApi~findTrackerItemChildrenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get child items of a tracker item
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~findTrackerItemChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findTrackerItemChildren(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling findTrackerItemChildren");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findTrackerItems operation.
     * @callback moduleapi/TrackerItemApi~findTrackerItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker items by cbQL query string
     * @param {String} queryString 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.baselineId Baseline on which the queery is applied.
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~findTrackerItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findTrackerItems(queryString, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queryString' is set
      if (queryString === undefined || queryString === null) {
        throw new Error("Missing the required parameter 'queryString' when calling findTrackerItems");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'baselineId': opts['baselineId'],'page': opts['page'],'pageSize': opts['pageSize'],'queryString': queryString
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemSearchResult;

      return this.apiClient.callApi(
        '/v3/items/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findTrackerItemsByCbQL operation.
     * @callback moduleapi/TrackerItemApi~findTrackerItemsByCbQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param {module:model/TrackerItemSearchRequest} body 
     * @param {module:api/TrackerItemApi~findTrackerItemsByCbQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findTrackerItemsByCbQL(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling findTrackerItemsByCbQL");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemSearchResult;

      return this.apiClient.callApi(
        '/v3/items/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBaselineTrackerItemRelations operation.
     * @callback moduleapi/TrackerItemApi~getBaselineTrackerItemRelationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemRelationsResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker items related to a tracker item
     * Use this endpoint to fetch tracker items related to a specified tracker item. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given item. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.baselineId 
     * @param {Number} opts.page Index of page, starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items per page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~getBaselineTrackerItemRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBaselineTrackerItemRelations(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getBaselineTrackerItemRelations");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'baselineId': opts['baselineId'],'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemRelationsResult;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/relations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBaselineTrackerItemsRelations operation.
     * @callback moduleapi/TrackerItemApi~getBaselineTrackerItemsRelationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerItemRelationsResult>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker items related to some tracker items
     * Use this endpoint to fetch tracker items related to some specified tracker items. The relations include downstream references, upstream references, incoming associations and outgoing associations of the given items. Relations with entities that are not tracker items (e.g., trackers, projects, URLs, etc.) will not be included in the result.
     * @param {module:model/TrackerItemsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.baselineId 
     * @param {module:api/TrackerItemApi~getBaselineTrackerItemsRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBaselineTrackerItemsRelations(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getBaselineTrackerItemsRelations");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'baselineId': opts['baselineId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TrackerItemRelationsResult];

      return this.apiClient.callApi(
        '/v3/items/relations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getChoiceOptions operation.
     * @callback moduleapi/TrackerItemApi~getChoiceOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the options of a choice field of tracker
     * @param {Number} itemId 
     * @param {Number} fieldId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~getChoiceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getChoiceOptions(itemId, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getChoiceOptions");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getChoiceOptions");
      }

      let pathParams = {
        'itemId': itemId,'fieldId': fieldId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/fields/{fieldId}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getItemAccessibility operation.
     * @callback moduleapi/TrackerItemApi~getItemAccessibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemFieldAccessibilityList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a tracker item fields accessibility
     * @param {Number} itemId Tracker item id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.targetStatusId 
     * @param {module:api/TrackerItemApi~getItemAccessibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getItemAccessibility(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getItemAccessibility");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'targetStatusId': opts['targetStatusId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemFieldAccessibilityList;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/fields/accessibility', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~getTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.version 
     * @param {Number} opts.baselineId 
     * @param {module:api/TrackerItemApi~getTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItem(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'version': opts['version'],'baselineId': opts['baselineId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/items/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemFields operation.
     * @callback moduleapi/TrackerItemApi~getTrackerItemFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemField{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fields of a tracker item
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~getTrackerItemFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemFields(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemFields");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemField;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemHistory operation.
     * @callback moduleapi/TrackerItemApi~getTrackerItemHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemHistory{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker item history
     * API can be used for fetching basic information of a tracker item
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~getTrackerItemHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemHistory(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemHistory");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemHistory;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemReviews operation.
     * @callback moduleapi/TrackerItemApi~getTrackerItemReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerItemReview>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Tracker Item Reviews for a particular Tracker Item
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~getTrackerItemReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemReviews(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemReviews");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackerItemReview];

      return this.apiClient.callApi(
        '/v3/items/{itemId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemTransitions operation.
     * @callback moduleapi/TrackerItemApi~getTrackerItemTransitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkflowTransition>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available transitions for a tracker item
     * API can be used for getting available transitions for a tracker item
     * @param {Number} itemId 
     * @param {module:api/TrackerItemApi~getTrackerItemTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemTransitions(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemTransitions");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkflowTransition];

      return this.apiClient.callApi(
        '/v3/items/{itemId}/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the lockTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~lockTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put a soft lock on a tracker item
     * @param {module:model/LockRequest} body 
     * @param {Number} itemId Tracker item id
     * @param {module:api/TrackerItemApi~lockTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lockTrackerItem(body, itemId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lockTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling lockTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchChildrenOfTracker operation.
     * @callback moduleapi/TrackerItemApi~patchChildrenOfTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemChildReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch the child item list of a tracker item
     * @param {module:model/TrackerItemChildReference} body 
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.mode  (default to <.>)
     * @param {module:api/TrackerItemApi~patchChildrenOfTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchChildrenOfTracker(body, trackerId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchChildrenOfTracker");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling patchChildrenOfTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'mode': opts['mode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemChildReference;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/children', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchChildrenOfTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~patchChildrenOfTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemChildReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch the child item list of a tracker item
     * @param {module:model/TrackerItemChildReference} body 
     * @param {Number} itemId 
     * @param {module:model/String} mode 
     * @param {module:api/TrackerItemApi~patchChildrenOfTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchChildrenOfTrackerItem(body, itemId, mode, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchChildrenOfTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling patchChildrenOfTrackerItem");
      }
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling patchChildrenOfTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'mode': mode
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemChildReference;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/children', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the replaceChildrenOfTracker operation.
     * @callback moduleapi/TrackerItemApi~replaceChildrenOfTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder the child item list of a tracker
     * @param {module:model/UpdateTrackerItemChildrenRequest} body 
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.resultPageSize Number of items in the result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~replaceChildrenOfTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    replaceChildrenOfTracker(body, trackerId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceChildrenOfTracker");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling replaceChildrenOfTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'resultPageSize': opts['resultPageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/children', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the replaceChildrenOfTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~replaceChildrenOfTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace the child item list of a tracker item
     * @param {module:model/UpdateTrackerItemChildrenRequest} body 
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.resultPageSize Number of items in the result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerItemApi~replaceChildrenOfTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    replaceChildrenOfTrackerItem(body, itemId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceChildrenOfTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling replaceChildrenOfTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'resultPageSize': opts['resultPageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItemReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/children', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unlockTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~unlockTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock a tracker item
     * @param {Number} itemId Tracker item id
     * @param {module:api/TrackerItemApi~unlockTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlockTrackerItem(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unlockTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCustomFieldTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~updateCustomFieldTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update fields of a tracker item
     * @param {module:model/UpdateTrackerItemField} body 
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.quietMode If it&#x27;s turned on HTTP 200 with empty response indicates that the update was successful. (default to <.>)
     * @param {module:api/TrackerItemApi~updateCustomFieldTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateCustomFieldTrackerItem(body, itemId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCustomFieldTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateCustomFieldTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'quietMode': opts['quietMode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/fields', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTableFieldTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~updateTableFieldTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update table field of tracker item
     * @param {module:model/UpdateTrackerItemTableField} body 
     * @param {Number} itemId 
     * @param {Number} tableFieldId 
     * @param {module:api/TrackerItemApi~updateTableFieldTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTableFieldTrackerItem(body, itemId, tableFieldId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTableFieldTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateTableFieldTrackerItem");
      }
      // verify the required parameter 'tableFieldId' is set
      if (tableFieldId === undefined || tableFieldId === null) {
        throw new Error("Missing the required parameter 'tableFieldId' when calling updateTableFieldTrackerItem");
      }

      let pathParams = {
        'itemId': itemId,'tableFieldId': tableFieldId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/fields/tables/{tableFieldId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTrackerItem operation.
     * @callback moduleapi/TrackerItemApi~updateTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tracker item
     * @param {module:model/TrackerItem} body 
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.referenceItemId 
     * @param {module:model/String} opts.position 
     * @param {module:api/TrackerItemApi~updateTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTrackerItem(body, itemId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTrackerItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'referenceItemId': opts['referenceItemId'],'position': opts['position']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}