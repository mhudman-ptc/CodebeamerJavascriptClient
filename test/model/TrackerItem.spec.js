/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerItem', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerItem();
      });

      it('should create an instance of TrackerItem', function() {
        // TODO: update the code to test TrackerItem
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerItem);
      });

      it('should have the property accruedMillis (base name: "accruedMillis")', function() {
        // TODO: update the code to test the property accruedMillis
        expect(instance).to.have.property('accruedMillis');
        // expect(instance.accruedMillis).to.be(expectedValueLiteral);
      });

      it('should have the property angularIcon (base name: "angularIcon")', function() {
        // TODO: update the code to test the property angularIcon
        expect(instance).to.have.property('angularIcon');
        // expect(instance.angularIcon).to.be(expectedValueLiteral);
      });

      it('should have the property areas (base name: "areas")', function() {
        // TODO: update the code to test the property areas
        expect(instance).to.have.property('areas');
        // expect(instance.areas).to.be(expectedValueLiteral);
      });

      it('should have the property assignedAt (base name: "assignedAt")', function() {
        // TODO: update the code to test the property assignedAt
        expect(instance).to.have.property('assignedAt');
        // expect(instance.assignedAt).to.be(expectedValueLiteral);
      });

      it('should have the property assignedTo (base name: "assignedTo")', function() {
        // TODO: update the code to test the property assignedTo
        expect(instance).to.have.property('assignedTo');
        // expect(instance.assignedTo).to.be(expectedValueLiteral);
      });

      it('should have the property categories (base name: "categories")', function() {
        // TODO: update the code to test the property categories
        expect(instance).to.have.property('categories');
        // expect(instance.categories).to.be(expectedValueLiteral);
      });

      it('should have the property children (base name: "children")', function() {
        // TODO: update the code to test the property children
        expect(instance).to.have.property('children');
        // expect(instance.children).to.be(expectedValueLiteral);
      });

      it('should have the property closedAt (base name: "closedAt")', function() {
        // TODO: update the code to test the property closedAt
        expect(instance).to.have.property('closedAt');
        // expect(instance.closedAt).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        // TODO: update the code to test the property comments
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property customFields (base name: "customFields")', function() {
        // TODO: update the code to test the property customFields
        expect(instance).to.have.property('customFields');
        // expect(instance.customFields).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionFormat (base name: "descriptionFormat")', function() {
        // TODO: update the code to test the property descriptionFormat
        expect(instance).to.have.property('descriptionFormat');
        // expect(instance.descriptionFormat).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedMillis (base name: "estimatedMillis")', function() {
        // TODO: update the code to test the property estimatedMillis
        expect(instance).to.have.property('estimatedMillis');
        // expect(instance.estimatedMillis).to.be(expectedValueLiteral);
      });

      it('should have the property formality (base name: "formality")', function() {
        // TODO: update the code to test the property formality
        expect(instance).to.have.property('formality');
        // expect(instance.formality).to.be(expectedValueLiteral);
      });

      it('should have the property iconColor (base name: "iconColor")', function() {
        // TODO: update the code to test the property iconColor
        expect(instance).to.have.property('iconColor');
        // expect(instance.iconColor).to.be(expectedValueLiteral);
      });

      it('should have the property iconUrl (base name: "iconUrl")', function() {
        // TODO: update the code to test the property iconUrl
        expect(instance).to.have.property('iconUrl');
        // expect(instance.iconUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedAt (base name: "modifiedAt")', function() {
        // TODO: update the code to test the property modifiedAt
        expect(instance).to.have.property('modifiedAt');
        // expect(instance.modifiedAt).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedBy (base name: "modifiedBy")', function() {
        // TODO: update the code to test the property modifiedBy
        expect(instance).to.have.property('modifiedBy');
        // expect(instance.modifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property ordinal (base name: "ordinal")', function() {
        // TODO: update the code to test the property ordinal
        expect(instance).to.have.property('ordinal');
        // expect(instance.ordinal).to.be(expectedValueLiteral);
      });

      it('should have the property owners (base name: "owners")', function() {
        // TODO: update the code to test the property owners
        expect(instance).to.have.property('owners');
        // expect(instance.owners).to.be(expectedValueLiteral);
      });

      it('should have the property parent (base name: "parent")', function() {
        // TODO: update the code to test the property parent
        expect(instance).to.have.property('parent');
        // expect(instance.parent).to.be(expectedValueLiteral);
      });

      it('should have the property platforms (base name: "platforms")', function() {
        // TODO: update the code to test the property platforms
        expect(instance).to.have.property('platforms');
        // expect(instance.platforms).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property releaseMethod (base name: "releaseMethod")', function() {
        // TODO: update the code to test the property releaseMethod
        expect(instance).to.have.property('releaseMethod');
        // expect(instance.releaseMethod).to.be(expectedValueLiteral);
      });

      it('should have the property resolutions (base name: "resolutions")', function() {
        // TODO: update the code to test the property resolutions
        expect(instance).to.have.property('resolutions');
        // expect(instance.resolutions).to.be(expectedValueLiteral);
      });

      it('should have the property severities (base name: "severities")', function() {
        // TODO: update the code to test the property severities
        expect(instance).to.have.property('severities');
        // expect(instance.severities).to.be(expectedValueLiteral);
      });

      it('should have the property spentMillis (base name: "spentMillis")', function() {
        // TODO: update the code to test the property spentMillis
        expect(instance).to.have.property('spentMillis');
        // expect(instance.spentMillis).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property storyPoints (base name: "storyPoints")', function() {
        // TODO: update the code to test the property storyPoints
        expect(instance).to.have.property('storyPoints');
        // expect(instance.storyPoints).to.be(expectedValueLiteral);
      });

      it('should have the property subjects (base name: "subjects")', function() {
        // TODO: update the code to test the property subjects
        expect(instance).to.have.property('subjects');
        // expect(instance.subjects).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property teams (base name: "teams")', function() {
        // TODO: update the code to test the property teams
        expect(instance).to.have.property('teams');
        // expect(instance.teams).to.be(expectedValueLiteral);
      });

      it('should have the property tracker (base name: "tracker")', function() {
        // TODO: update the code to test the property tracker
        expect(instance).to.have.property('tracker');
        // expect(instance.tracker).to.be(expectedValueLiteral);
      });

      it('should have the property typeName (base name: "typeName")', function() {
        // TODO: update the code to test the property typeName
        expect(instance).to.have.property('typeName');
        // expect(instance.typeName).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property versions (base name: "versions")', function() {
        // TODO: update the code to test the property versions
        expect(instance).to.have.property('versions');
        // expect(instance.versions).to.be(expectedValueLiteral);
      });

    });
  });

}));
