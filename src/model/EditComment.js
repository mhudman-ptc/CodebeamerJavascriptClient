/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The EditComment model module.
 * @module model/EditComment
 * @version 3.0
 */
export default class EditComment {
  /**
   * Constructs a new <code>EditComment</code>.
   * @alias module:model/EditComment
   * @class
   * @param comment {String} Text of a comment
   */
  constructor(comment) {
    this.comment = comment;
  }

  /**
   * Constructs a <code>EditComment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EditComment} obj Optional instance to populate.
   * @return {module:model/EditComment} The populated <code>EditComment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EditComment();
      if (data.hasOwnProperty('attachments'))
        obj.attachments = ApiClient.convertToType(data['attachments'], 'Blob');
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('commentFormat'))
        obj.commentFormat = ApiClient.convertToType(data['commentFormat'], 'String');
    }
    return obj;
  }
}

/**
 * Attachments of a comment
 * @member {Blob} attachments
 */
EditComment.prototype.attachments = undefined;

/**
 * Text of a comment
 * @member {String} comment
 */
EditComment.prototype.comment = undefined;

/**
 * Allowed values for the <code>commentFormat</code> property.
 * @enum {String}
 * @readonly
 */
EditComment.CommentFormatEnum = {
  /**
   * value: "PlainText"
   * @const
   */
  plainText: "PlainText",

  /**
   * value: "Html"
   * @const
   */
  html: "Html",

  /**
   * value: "Wiki"
   * @const
   */
  wiki: "Wiki"
};
/**
 * Format of a comment
 * @member {module:model/EditComment.CommentFormatEnum} commentFormat
 * @default 'PlainText'
 */
EditComment.prototype.commentFormat = 'PlainText';

