/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerItemReference', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerItemReference();
      });

      it('should create an instance of TrackerItemReference', function() {
        // TODO: update the code to test TrackerItemReference
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerItemReference);
      });

      it('should have the property angularIcon (base name: "angularIcon")', function() {
        // TODO: update the code to test the property angularIcon
        expect(instance).to.have.property('angularIcon');
        // expect(instance.angularIcon).to.be(expectedValueLiteral);
      });

      it('should have the property iconColor (base name: "iconColor")', function() {
        // TODO: update the code to test the property iconColor
        expect(instance).to.have.property('iconColor');
        // expect(instance.iconColor).to.be(expectedValueLiteral);
      });

      it('should have the property propagateSuspects (base name: "propagateSuspects")', function() {
        // TODO: update the code to test the property propagateSuspects
        expect(instance).to.have.property('propagateSuspects');
        // expect(instance.propagateSuspects).to.be(expectedValueLiteral);
      });

      it('should have the property referenceData (base name: "referenceData")', function() {
        // TODO: update the code to test the property referenceData
        expect(instance).to.have.property('referenceData');
        // expect(instance.referenceData).to.be(expectedValueLiteral);
      });

      it('should have the property testStepReuse (base name: "testStepReuse")', function() {
        // TODO: update the code to test the property testStepReuse
        expect(instance).to.have.property('testStepReuse');
        // expect(instance.testStepReuse).to.be(expectedValueLiteral);
      });

      it('should have the property trackerKey (base name: "trackerKey")', function() {
        // TODO: update the code to test the property trackerKey
        expect(instance).to.have.property('trackerKey');
        // expect(instance.trackerKey).to.be(expectedValueLiteral);
      });

      it('should have the property trackerTypeId (base name: "trackerTypeId")', function() {
        // TODO: update the code to test the property trackerTypeId
        expect(instance).to.have.property('trackerTypeId');
        // expect(instance.trackerTypeId).to.be(expectedValueLiteral);
      });

      it('should have the property uri (base name: "uri")', function() {
        // TODO: update the code to test the property uri
        expect(instance).to.have.property('uri');
        // expect(instance.uri).to.be(expectedValueLiteral);
      });

    });
  });

}));
