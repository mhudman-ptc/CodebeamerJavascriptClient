/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Tracker', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.Tracker();
      });

      it('should create an instance of Tracker', function() {
        // TODO: update the code to test Tracker
        expect(instance).to.be.a(CodebeamerSwaggerApi.Tracker);
      });

      it('should have the property availableAsTemplate (base name: "availableAsTemplate")', function() {
        // TODO: update the code to test the property availableAsTemplate
        expect(instance).to.have.property('availableAsTemplate');
        // expect(instance.availableAsTemplate).to.be(expectedValueLiteral);
      });

      it('should have the property color (base name: "color")', function() {
        // TODO: update the code to test the property color
        expect(instance).to.have.property('color');
        // expect(instance.color).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property defaultShowAncestorItems (base name: "defaultShowAncestorItems")', function() {
        // TODO: update the code to test the property defaultShowAncestorItems
        expect(instance).to.have.property('defaultShowAncestorItems');
        // expect(instance.defaultShowAncestorItems).to.be(expectedValueLiteral);
      });

      it('should have the property defaultShowDescendantItems (base name: "defaultShowDescendantItems")', function() {
        // TODO: update the code to test the property defaultShowDescendantItems
        expect(instance).to.have.property('defaultShowDescendantItems');
        // expect(instance.defaultShowDescendantItems).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionFormat (base name: "descriptionFormat")', function() {
        // TODO: update the code to test the property descriptionFormat
        expect(instance).to.have.property('descriptionFormat');
        // expect(instance.descriptionFormat).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property keyName (base name: "keyName")', function() {
        // TODO: update the code to test the property keyName
        expect(instance).to.have.property('keyName');
        // expect(instance.keyName).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedAt (base name: "modifiedAt")', function() {
        // TODO: update the code to test the property modifiedAt
        expect(instance).to.have.property('modifiedAt');
        // expect(instance.modifiedAt).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedBy (base name: "modifiedBy")', function() {
        // TODO: update the code to test the property modifiedBy
        expect(instance).to.have.property('modifiedBy');
        // expect(instance.modifiedBy).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property onlyWorkflowCanCreateNewReferringItem (base name: "onlyWorkflowCanCreateNewReferringItem")', function() {
        // TODO: update the code to test the property onlyWorkflowCanCreateNewReferringItem
        expect(instance).to.have.property('onlyWorkflowCanCreateNewReferringItem');
        // expect(instance.onlyWorkflowCanCreateNewReferringItem).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property sharedInWorkingSet (base name: "sharedInWorkingSet")', function() {
        // TODO: update the code to test the property sharedInWorkingSet
        expect(instance).to.have.property('sharedInWorkingSet');
        // expect(instance.sharedInWorkingSet).to.be(expectedValueLiteral);
      });

      it('should have the property templateTracker (base name: "templateTracker")', function() {
        // TODO: update the code to test the property templateTracker
        expect(instance).to.have.property('templateTracker');
        // expect(instance.templateTracker).to.be(expectedValueLiteral);
      });

      it('should have the property trackerFieldLayoutSettingsModel (base name: "trackerFieldLayoutSettingsModel")', function() {
        // TODO: update the code to test the property trackerFieldLayoutSettingsModel
        expect(instance).to.have.property('trackerFieldLayoutSettingsModel');
        // expect(instance.trackerFieldLayoutSettingsModel).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property usingQuickTransitions (base name: "usingQuickTransitions")', function() {
        // TODO: update the code to test the property usingQuickTransitions
        expect(instance).to.have.property('usingQuickTransitions');
        // expect(instance.usingQuickTransitions).to.be(expectedValueLiteral);
      });

      it('should have the property usingWorkflow (base name: "usingWorkflow")', function() {
        // TODO: update the code to test the property usingWorkflow
        expect(instance).to.have.property('usingWorkflow');
        // expect(instance.usingWorkflow).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

    });
  });

}));
