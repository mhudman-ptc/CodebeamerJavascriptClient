/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import AttachmentReference from '../model/AttachmentReference';
import InternalServerErrorException from '../model/InternalServerErrorException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* WikisComment service.
* @module api/WikisCommentApi
* @version 3.0
*/
export default class WikisCommentApi {

    /**
    * Constructs a new WikisCommentApi. 
    * @alias module:api/WikisCommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the commentOnWiki operation.
     * @callback moduleapi/WikisCommentApi~commentOnWikiCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AttachmentReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment on a wiki page
     * @param {Number} wikiId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.attachments 
     * @param {String} opts.comment 
     * @param {module:model/String} opts.commentFormat 
     * @param {module:api/WikisCommentApi~commentOnWikiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    commentOnWiki(wikiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling commentOnWiki");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'attachments': opts['attachments'],'comment': opts['comment'],'commentFormat': opts['commentFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', '*/*'];
      let returnType = [AttachmentReference];

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAttachmentByName operation.
     * @callback moduleapi/WikisCommentApi~getAttachmentByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachment of wiki page by file name
     * @param {Number} wikiId 
     * @param {String} fileName 
     * @param {module:api/WikisCommentApi~getAttachmentByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAttachmentByName(wikiId, fileName, callback) {
      
      let postBody = null;
      // verify the required parameter 'wikiId' is set
      if (wikiId === undefined || wikiId === null) {
        throw new Error("Missing the required parameter 'wikiId' when calling getAttachmentByName");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getAttachmentByName");
      }

      let pathParams = {
        'wikiId': wikiId
      };
      let queryParams = {
        'fileName': fileName
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/wikipages/{wikiId}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}