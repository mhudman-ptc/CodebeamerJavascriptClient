/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TraceabilityItem', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TraceabilityItem();
      });

      it('should create an instance of TraceabilityItem', function() {
        // TODO: update the code to test TraceabilityItem
        expect(instance).to.be.a(CodebeamerSwaggerApi.TraceabilityItem);
      });

      it('should have the property children (base name: "children")', function() {
        // TODO: update the code to test the property children
        expect(instance).to.have.property('children');
        // expect(instance.children).to.be(expectedValueLiteral);
      });

      it('should have the property incomingAssociation (base name: "incoming association")', function() {
        // TODO: update the code to test the property incomingAssociation
        expect(instance).to.have.property('incomingAssociation');
        // expect(instance.incomingAssociation).to.be(expectedValueLiteral);
      });

      it('should have the property incomingReference (base name: "incoming reference")', function() {
        // TODO: update the code to test the property incomingReference
        expect(instance).to.have.property('incomingReference');
        // expect(instance.incomingReference).to.be(expectedValueLiteral);
      });

      it('should have the property incomingAssociations (base name: "incomingAssociations")', function() {
        // TODO: update the code to test the property incomingAssociations
        expect(instance).to.have.property('incomingAssociations');
        // expect(instance.incomingAssociations).to.be(expectedValueLiteral);
      });

      it('should have the property incomingReferences (base name: "incomingReferences")', function() {
        // TODO: update the code to test the property incomingReferences
        expect(instance).to.have.property('incomingReferences');
        // expect(instance.incomingReferences).to.be(expectedValueLiteral);
      });

      it('should have the property itemRevision (base name: "itemRevision")', function() {
        // TODO: update the code to test the property itemRevision
        expect(instance).to.have.property('itemRevision');
        // expect(instance.itemRevision).to.be(expectedValueLiteral);
      });

      it('should have the property outgoingAssociation (base name: "outgoing association")', function() {
        // TODO: update the code to test the property outgoingAssociation
        expect(instance).to.have.property('outgoingAssociation');
        // expect(instance.outgoingAssociation).to.be(expectedValueLiteral);
      });

      it('should have the property outgoingReference (base name: "outgoing reference")', function() {
        // TODO: update the code to test the property outgoingReference
        expect(instance).to.have.property('outgoingReference');
        // expect(instance.outgoingReference).to.be(expectedValueLiteral);
      });

      it('should have the property outgoingAssociations (base name: "outgoingAssociations")', function() {
        // TODO: update the code to test the property outgoingAssociations
        expect(instance).to.have.property('outgoingAssociations');
        // expect(instance.outgoingAssociations).to.be(expectedValueLiteral);
      });

      it('should have the property outgoingReferences (base name: "outgoingReferences")', function() {
        // TODO: update the code to test the property outgoingReferences
        expect(instance).to.have.property('outgoingReferences');
        // expect(instance.outgoingReferences).to.be(expectedValueLiteral);
      });

    });
  });

}));
