/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import AttachmentSearchResult from '../model/AttachmentSearchResult';
import BadRequestException from '../model/BadRequestException';
import InternalServerErrorException from '../model/InternalServerErrorException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceLockedException from '../model/ResourceLockedException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerItemAttachmentRequest from '../model/TrackerItemAttachmentRequest';

/**
* TrackerItemsAttachment service.
* @module api/TrackerItemsAttachmentApi
* @version 3.0
*/
export default class TrackerItemsAttachmentApi {

    /**
    * Constructs a new TrackerItemsAttachmentApi. 
    * @alias module:api/TrackerItemsAttachmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteTrackerItemAttachment operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~deleteTrackerItemAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attachment of tracker item by id
     * @param {Number} itemId 
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (default to <.>)
     * @param {module:api/TrackerItemsAttachmentApi~deleteTrackerItemAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTrackerItemAttachment(itemId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTrackerItemAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling deleteTrackerItemAttachment");
      }

      let pathParams = {
        'itemId': itemId,'attachmentId': attachmentId
      };
      let queryParams = {
        'deleteAttachmentGroup': opts['deleteAttachmentGroup']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments/{attachmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrackerItemAttachments operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~deleteTrackerItemAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attachments of tracker item
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deleteAttachmentGroup Delete attachment group or delete just the attachment and let the comment there (default to <.>)
     * @param {module:api/TrackerItemsAttachmentApi~deleteTrackerItemAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackerItemAttachments(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTrackerItemAttachments");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'deleteAttachmentGroup': opts['deleteAttachmentGroup']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemAttachment operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~getTrackerItemAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachment of tracker item by id
     * @param {Number} itemId 
     * @param {Number} attachmentId 
     * @param {module:api/TrackerItemsAttachmentApi~getTrackerItemAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemAttachment(itemId, attachmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemAttachment");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getTrackerItemAttachment");
      }

      let pathParams = {
        'itemId': itemId,'attachmentId': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments/{attachmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemAttachmentContent operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~getTrackerItemAttachmentContentCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get content of an attachment of tracker item by id
     * @param {Number} itemId 
     * @param {Number} attachmentId 
     * @param {module:api/TrackerItemsAttachmentApi~getTrackerItemAttachmentContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemAttachmentContent(itemId, attachmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemAttachmentContent");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling getTrackerItemAttachmentContent");
      }

      let pathParams = {
        'itemId': itemId,'attachmentId': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments/{attachmentId}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemAttachmentContents operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~getTrackerItemAttachmentContentsCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments of a tracker item
     * @param {Number} itemId 
     * @param {module:api/TrackerItemsAttachmentApi~getTrackerItemAttachmentContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemAttachmentContents(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemAttachmentContents");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemAttachments operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~getTrackerItemAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments of tracker item
     * @param {Number} itemId Id of the tracker item
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileName Filter by part of the filename of the attachments
     * @param {module:api/TrackerItemsAttachmentApi~getTrackerItemAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemAttachments(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemAttachments");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'fileName': opts['fileName']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentSearchResult;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemsAttachmentContents operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~getTrackerItemsAttachmentContentsCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments of tracker items matching the extension or mime type filters
     * @param {module:model/TrackerItemAttachmentRequest} body 
     * @param {module:api/TrackerItemsAttachmentApi~getTrackerItemsAttachmentContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemsAttachmentContents(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTrackerItemsAttachmentContents");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v3/items/attachments/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateAttachmentOfTrackerItem operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~updateAttachmentOfTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update content of attachment of tracker item
     * @param {Number} itemId 
     * @param {Number} attachmentId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.content 
     * @param {String} opts.description 
     * @param {module:model/String} opts.descriptionFormat 
     * @param {module:api/TrackerItemsAttachmentApi~updateAttachmentOfTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateAttachmentOfTrackerItem(itemId, attachmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateAttachmentOfTrackerItem");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling updateAttachmentOfTrackerItem");
      }

      let pathParams = {
        'itemId': itemId,'attachmentId': attachmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'content': opts['content'],'description': opts['description'],'descriptionFormat': opts['descriptionFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Attachment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments/{attachmentId}/content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadTrackerItemAttachment operation.
     * @callback moduleapi/TrackerItemsAttachmentApi~uploadTrackerItemAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an attachment to a tracker item
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.attachments 
     * @param {module:api/TrackerItemsAttachmentApi~uploadTrackerItemAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadTrackerItemAttachment(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling uploadTrackerItemAttachment");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'attachments': opts['attachments']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Attachment];

      return this.apiClient.callApi(
        '/v3/items/{itemId}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}