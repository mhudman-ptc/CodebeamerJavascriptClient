/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 3.0
 */
export default class User {
  /**
   * Constructs a new <code>User</code>.
   * Properties of a codebeamer user
   * @alias module:model/User
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/User} obj Optional instance to populate.
   * @return {module:model/User} The populated <code>User</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new User();
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], 'String');
      if (data.hasOwnProperty('company'))
        obj.company = ApiClient.convertToType(data['company'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('dateFormat'))
        obj.dateFormat = ApiClient.convertToType(data['dateFormat'], 'String');
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('firstName'))
        obj.firstName = ApiClient.convertToType(data['firstName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('language'))
        obj.language = ApiClient.convertToType(data['language'], 'String');
      if (data.hasOwnProperty('lastLoginDate'))
        obj.lastLoginDate = ApiClient.convertToType(data['lastLoginDate'], 'Date');
      if (data.hasOwnProperty('lastName'))
        obj.lastName = ApiClient.convertToType(data['lastName'], 'String');
      if (data.hasOwnProperty('mobile'))
        obj.mobile = ApiClient.convertToType(data['mobile'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('phone'))
        obj.phone = ApiClient.convertToType(data['phone'], 'String');
      if (data.hasOwnProperty('registryDate'))
        obj.registryDate = ApiClient.convertToType(data['registryDate'], 'Date');
      if (data.hasOwnProperty('skills'))
        obj.skills = ApiClient.convertToType(data['skills'], 'String');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('timeZone'))
        obj.timeZone = ApiClient.convertToType(data['timeZone'], 'String');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('zip'))
        obj.zip = ApiClient.convertToType(data['zip'], 'String');
    }
    return obj;
  }
}

/**
 * Address of a user
 * @member {String} address
 */
User.prototype.address = undefined;

/**
 * City of a user
 * @member {String} city
 */
User.prototype.city = undefined;

/**
 * Company of a user
 * @member {String} company
 */
User.prototype.company = undefined;

/**
 * Country of a user in ISO 3166-1 alpha-2 format
 * @member {String} country
 */
User.prototype.country = undefined;

/**
 * Date format of a user
 * @member {String} dateFormat
 */
User.prototype.dateFormat = undefined;

/**
 * Email of a user
 * @member {String} email
 */
User.prototype.email = undefined;

/**
 * First name of a user
 * @member {String} firstName
 */
User.prototype.firstName = undefined;

/**
 * Id of the entity
 * @member {Number} id
 */
User.prototype.id = undefined;

/**
 * Language of a user in ISO 639-1 format
 * @member {String} language
 */
User.prototype.language = undefined;

/**
 * Last login date of a user
 * @member {Date} lastLoginDate
 */
User.prototype.lastLoginDate = undefined;

/**
 * Last name of a user
 * @member {String} lastName
 */
User.prototype.lastName = undefined;

/**
 * Mobile number of a user
 * @member {String} mobile
 */
User.prototype.mobile = undefined;

/**
 * Name of the entity
 * @member {String} name
 */
User.prototype.name = undefined;

/**
 * Phone number of a user
 * @member {String} phone
 */
User.prototype.phone = undefined;

/**
 * Registration date of a user
 * @member {Date} registryDate
 */
User.prototype.registryDate = undefined;

/**
 * Skills of a user
 * @member {String} skills
 */
User.prototype.skills = undefined;

/**
 * State / providence of a user
 * @member {String} state
 */
User.prototype.state = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
User.StatusEnum = {
  /**
   * value: "ACTIVATED"
   * @const
   */
  ACTIVATED: "ACTIVATED",

  /**
   * value: "DISABLED"
   * @const
   */
  DISABLED: "DISABLED",

  /**
   * value: "INACTIVATION"
   * @const
   */
  INACTIVATION: "INACTIVATION"
};
/**
 * Status of a user
 * @member {module:model/User.StatusEnum} status
 */
User.prototype.status = undefined;

/**
 * Time zone of a user
 * @member {String} timeZone
 */
User.prototype.timeZone = undefined;

/**
 * Title of a user
 * @member {String} title
 */
User.prototype.title = undefined;

/**
 * Zip of a user
 * @member {String} zip
 */
User.prototype.zip = undefined;

