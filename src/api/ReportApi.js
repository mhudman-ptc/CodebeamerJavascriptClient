/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import ReportItemResult from '../model/ReportItemResult';
import ReportResult from '../model/ReportResult';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import RestException from '../model/RestException';
import SimpleReportSettings from '../model/SimpleReportSettings';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* Report service.
* @module api/ReportApi
* @version 3.0
*/
export default class ReportApi {

    /**
    * Constructs a new ReportApi. 
    * @alias module:api/ReportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createReport operation.
     * @callback moduleapi/ReportApi~createReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleReportSettings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a report
     * @param {module:model/SimpleReportSettings} body 
     * @param {module:api/ReportApi~createReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createReport(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReport");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleReportSettings;

      return this.apiClient.callApi(
        '/v3/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReportById operation.
     * @callback moduleapi/ReportApi~getReportByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report results by id of the report
     * @param {Number} reportId Id of a report
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of a report page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items a report page. Max value: 500 (default to <.>)
     * @param {module:api/ReportApi~getReportByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReportById(reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReportById");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ReportResult;

      return this.apiClient.callApi(
        '/v3/reports/{reportId}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getReportItemsById operation.
     * @callback moduleapi/ReportApi~getReportItemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportItemResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report items by id of the report
     * @param {Number} reportId Id of a report
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of a report page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items a report page. Max value: 500 (default to <.>)
     * @param {module:api/ReportApi~getReportItemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getReportItemsById(reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReportItemsById");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ReportItemResult;

      return this.apiClient.callApi(
        '/v3/reports/{reportId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateReport operation.
     * @callback moduleapi/ReportApi~updateReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleReportSettings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update report settings
     * @param {module:model/SimpleReportSettings} body 
     * @param {Number} reportId Id of a report
     * @param {module:api/ReportApi~updateReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateReport(body, reportId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReport");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling updateReport");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleReportSettings;

      return this.apiClient.callApi(
        '/v3/reports/{reportId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}