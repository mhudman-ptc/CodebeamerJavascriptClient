/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import BatchGetTrackerItemReviewsRequest from '../model/BatchGetTrackerItemReviewsRequest';
import ExportProject from '../model/ExportProject';
import ExportToWordRequest from '../model/ExportToWordRequest';
import InternalServerErrorException from '../model/InternalServerErrorException';
import JobReference from '../model/JobReference';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerItem from '../model/TrackerItem';
import TrackerItemWithTrackerItemReviewsExport from '../model/TrackerItemWithTrackerItemReviewsExport';
import TrackerItemsRequest from '../model/TrackerItemsRequest';

/**
* Export service.
* @module api/ExportApi
* @version 3.0
*/
export default class ExportApi {

    /**
    * Constructs a new ExportApi. 
    * @alias module:api/ExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the batchGetTrackerItemReviews operation.
     * @callback moduleapi/ExportApi~batchGetTrackerItemReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerItemWithTrackerItemReviewsExport>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker item reviews by a list of tracker item IDs
     * @param {module:model/BatchGetTrackerItemReviewsRequest} body 
     * @param {module:api/ExportApi~batchGetTrackerItemReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    batchGetTrackerItemReviews(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchGetTrackerItemReviews");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TrackerItemWithTrackerItemReviewsExport];

      return this.apiClient.callApi(
        '/v3/export/tracker-item-reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the callExport operation.
     * @callback moduleapi/ExportApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports the specified project to a zip file
     * @param {module:model/ExportProject} body 
     * @param {Number} projectId 
     * @param {module:api/ExportApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    callExport(body, projectId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling callExport");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling callExport");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/zip', 'application/json'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/v3/projects/{projectId}/content', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the exportToWord operation.
     * @callback moduleapi/ExportApi~exportToWordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports items to Word
     * API can be used for exporting items to Word
     * @param {module:model/ExportToWordRequest} body 
     * @param {module:api/ExportApi~exportToWordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    exportToWord(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportToWord");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobReference;

      return this.apiClient.callApi(
        '/v3/export/exportToWord', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItems operation.
     * @callback moduleapi/ExportApi~getTrackerItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param {module:model/TrackerItemsRequest} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.baselineId 
     * @param {module:api/ExportApi~getTrackerItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItems(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTrackerItems");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'baselineId': opts['baselineId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TrackerItem];

      return this.apiClient.callApi(
        '/v3/export/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}