/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import AbstractReference from './AbstractReference';
import AssociationTypeReference from './AssociationTypeReference';
import UserReference from './UserReference';

/**
 * The Association model module.
 * @module model/Association
 * @version 3.0
 */
export default class Association {
  /**
   * Constructs a new <code>Association</code>.
   * Basic properties of a codebeamer association
   * @alias module:model/Association
   * @class
   * @param from {module:model/AbstractReference} 
   */
  constructor(from) {
    this.from = from;
  }

  /**
   * Constructs a <code>Association</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Association} obj Optional instance to populate.
   * @return {module:model/Association} The populated <code>Association</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Association();
      if (data.hasOwnProperty('baselineId'))
        obj.baselineId = ApiClient.convertToType(data['baselineId'], 'Number');
      if (data.hasOwnProperty('biDirectionalPropagation'))
        obj.biDirectionalPropagation = ApiClient.convertToType(data['biDirectionalPropagation'], 'Boolean');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = UserReference.constructFromObject(data['createdBy']);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('descriptionFormat'))
        obj.descriptionFormat = ApiClient.convertToType(data['descriptionFormat'], 'String');
      if (data.hasOwnProperty('from'))
        obj.from = AbstractReference.constructFromObject(data['from']);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('propagatingDependencies'))
        obj.propagatingDependencies = ApiClient.convertToType(data['propagatingDependencies'], 'Boolean');
      if (data.hasOwnProperty('propagatingSuspects'))
        obj.propagatingSuspects = ApiClient.convertToType(data['propagatingSuspects'], 'Boolean');
      if (data.hasOwnProperty('reversePropagation'))
        obj.reversePropagation = ApiClient.convertToType(data['reversePropagation'], 'Boolean');
      if (data.hasOwnProperty('to'))
        obj.to = AbstractReference.constructFromObject(data['to']);
      if (data.hasOwnProperty('type'))
        obj.type = AssociationTypeReference.constructFromObject(data['type']);
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
    }
    return obj;
  }
}

/**
 * Baseline ID
 * @member {Number} baselineId
 */
Association.prototype.baselineId = undefined;

/**
 * Bi-directional reference
 * @member {Boolean} biDirectionalPropagation
 */
Association.prototype.biDirectionalPropagation = undefined;

/**
 * The date when the entity was created
 * @member {Date} createdAt
 */
Association.prototype.createdAt = undefined;

/**
 * @member {module:model/UserReference} createdBy
 */
Association.prototype.createdBy = undefined;

/**
 * Description of the entity
 * @member {String} description
 */
Association.prototype.description = undefined;

/**
 * Allowed values for the <code>descriptionFormat</code> property.
 * @enum {String}
 * @readonly
 */
Association.DescriptionFormatEnum = {
  /**
   * value: "PlainText"
   * @const
   */
  plainText: "PlainText",

  /**
   * value: "Html"
   * @const
   */
  html: "Html",

  /**
   * value: "Wiki"
   * @const
   */
  wiki: "Wiki"
};
/**
 * Description format of the entity
 * @member {module:model/Association.DescriptionFormatEnum} descriptionFormat
 */
Association.prototype.descriptionFormat = undefined;

/**
 * @member {module:model/AbstractReference} from
 */
Association.prototype.from = undefined;

/**
 * Id of the entity
 * @member {Number} id
 */
Association.prototype.id = undefined;

/**
 * Name of the entity
 * @member {String} name
 */
Association.prototype.name = undefined;

/**
 * Propagating dependencies
 * @member {Boolean} propagatingDependencies
 */
Association.prototype.propagatingDependencies = undefined;

/**
 * Propagating suspects
 * @member {Boolean} propagatingSuspects
 */
Association.prototype.propagatingSuspects = undefined;

/**
 * Reverse propagation
 * @member {Boolean} reversePropagation
 */
Association.prototype.reversePropagation = undefined;

/**
 * @member {module:model/AbstractReference} to
 */
Association.prototype.to = undefined;

/**
 * @member {module:model/AssociationTypeReference} type
 */
Association.prototype.type = undefined;

/**
 * Association to url
 * @member {String} url
 */
Association.prototype.url = undefined;

