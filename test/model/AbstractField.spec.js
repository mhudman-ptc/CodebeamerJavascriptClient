/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AbstractField', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.AbstractField();
      });

      it('should create an instance of AbstractField', function() {
        // TODO: update the code to test AbstractField
        expect(instance).to.be.a(CodebeamerSwaggerApi.AbstractField);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property formula (base name: "formula")', function() {
        // TODO: update the code to test the property formula
        expect(instance).to.have.property('formula');
        // expect(instance.formula).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property hideIfDependencyFormula (base name: "hideIfDependencyFormula")', function() {
        // TODO: update the code to test the property hideIfDependencyFormula
        expect(instance).to.have.property('hideIfDependencyFormula');
        // expect(instance.hideIfDependencyFormula).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property legacyRestName (base name: "legacyRestName")', function() {
        // TODO: update the code to test the property legacyRestName
        expect(instance).to.have.property('legacyRestName');
        // expect(instance.legacyRestName).to.be(expectedValueLiteral);
      });

      it('should have the property mandatoryIfDependencyFormula (base name: "mandatoryIfDependencyFormula")', function() {
        // TODO: update the code to test the property mandatoryIfDependencyFormula
        expect(instance).to.have.property('mandatoryIfDependencyFormula');
        // expect(instance.mandatoryIfDependencyFormula).to.be(expectedValueLiteral);
      });

      it('should have the property mandatoryInStatuses (base name: "mandatoryInStatuses")', function() {
        // TODO: update the code to test the property mandatoryInStatuses
        expect(instance).to.have.property('mandatoryInStatuses');
        // expect(instance.mandatoryInStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property sharedFields (base name: "sharedFields")', function() {
        // TODO: update the code to test the property sharedFields
        expect(instance).to.have.property('sharedFields');
        // expect(instance.sharedFields).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property trackerItemField (base name: "trackerItemField")', function() {
        // TODO: update the code to test the property trackerItemField
        expect(instance).to.have.property('trackerItemField');
        // expect(instance.trackerItemField).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property valueModel (base name: "valueModel")', function() {
        // TODO: update the code to test the property valueModel
        expect(instance).to.have.property('valueModel');
        // expect(instance.valueModel).to.be(expectedValueLiteral);
      });

    });
  });

}));
