/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CodebeamerSwaggerApi.TrackerItemApi();
  });

  describe('(package)', function() {
    describe('TrackerItemApi', function() {
      describe('addChildToTracker', function() {
        it('should call addChildToTracker successfully', function(done) {
          // TODO: uncomment, update parameter values for addChildToTracker call and complete the assertions
          /*

          instance.addChildToTracker(body, trackerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemChildReference);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addChildToTrackerItem', function() {
        it('should call addChildToTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for addChildToTrackerItem call and complete the assertions
          /*

          instance.addChildToTrackerItem(body, itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemChildReference);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpdateTrackerItemFields', function() {
        it('should call bulkUpdateTrackerItemFields successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpdateTrackerItemFields call and complete the assertions
          /*
          var opts = {};

          instance.bulkUpdateTrackerItemFields(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.BulkOperationResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkTrackerItemLock', function() {
        it('should call checkTrackerItemLock successfully', function(done) {
          // TODO: uncomment, update parameter values for checkTrackerItemLock call and complete the assertions
          /*

          instance.checkTrackerItemLock(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.LockInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createTrackerItem', function() {
        it('should call createTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for createTrackerItem call and complete the assertions
          /*
          var opts = {};

          instance.createTrackerItem(body, trackerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTrackerItem', function() {
        it('should call deleteTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTrackerItem call and complete the assertions
          /*

          instance.deleteTrackerItem(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findTrackerChildren', function() {
        it('should call findTrackerChildren successfully', function(done) {
          // TODO: uncomment, update parameter values for findTrackerChildren call and complete the assertions
          /*
          var opts = {};

          instance.findTrackerChildren(trackerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findTrackerItemChildren', function() {
        it('should call findTrackerItemChildren successfully', function(done) {
          // TODO: uncomment, update parameter values for findTrackerItemChildren call and complete the assertions
          /*
          var opts = {};

          instance.findTrackerItemChildren(itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findTrackerItems', function() {
        it('should call findTrackerItems successfully', function(done) {
          // TODO: uncomment, update parameter values for findTrackerItems call and complete the assertions
          /*
          var opts = {};

          instance.findTrackerItems(queryString, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('findTrackerItemsByCbQL', function() {
        it('should call findTrackerItemsByCbQL successfully', function(done) {
          // TODO: uncomment, update parameter values for findTrackerItemsByCbQL call and complete the assertions
          /*

          instance.findTrackerItemsByCbQL(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaselineTrackerItemRelations', function() {
        it('should call getBaselineTrackerItemRelations successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaselineTrackerItemRelations call and complete the assertions
          /*
          var opts = {};

          instance.getBaselineTrackerItemRelations(itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemRelationsResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBaselineTrackerItemsRelations', function() {
        it('should call getBaselineTrackerItemsRelations successfully', function(done) {
          // TODO: uncomment, update parameter values for getBaselineTrackerItemsRelations call and complete the assertions
          /*
          var opts = {};

          instance.getBaselineTrackerItemsRelations(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemRelationsResult);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getChoiceOptions', function() {
        it('should call getChoiceOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getChoiceOptions call and complete the assertions
          /*
          var opts = {};

          instance.getChoiceOptions(itemId, fieldId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.ReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getItemAccessibility', function() {
        it('should call getItemAccessibility successfully', function(done) {
          // TODO: uncomment, update parameter values for getItemAccessibility call and complete the assertions
          /*
          var opts = {};

          instance.getItemAccessibility(itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemFieldAccessibilityList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackerItem', function() {
        it('should call getTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackerItem call and complete the assertions
          /*
          var opts = {};

          instance.getTrackerItem(itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackerItemFields', function() {
        it('should call getTrackerItemFields successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackerItemFields call and complete the assertions
          /*

          instance.getTrackerItemFields(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemField);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackerItemHistory', function() {
        it('should call getTrackerItemHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackerItemHistory call and complete the assertions
          /*

          instance.getTrackerItemHistory(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemHistory);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackerItemReviews', function() {
        it('should call getTrackerItemReviews successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackerItemReviews call and complete the assertions
          /*

          instance.getTrackerItemReviews(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemReview);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTrackerItemTransitions', function() {
        it('should call getTrackerItemTransitions successfully', function(done) {
          // TODO: uncomment, update parameter values for getTrackerItemTransitions call and complete the assertions
          /*

          instance.getTrackerItemTransitions(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CodebeamerSwaggerApi.WorkflowTransition);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('lockTrackerItem', function() {
        it('should call lockTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for lockTrackerItem call
          /*

          instance.lockTrackerItem(body, itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchChildrenOfTracker', function() {
        it('should call patchChildrenOfTracker successfully', function(done) {
          // TODO: uncomment, update parameter values for patchChildrenOfTracker call and complete the assertions
          /*
          var opts = {};

          instance.patchChildrenOfTracker(body, trackerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemChildReference);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchChildrenOfTrackerItem', function() {
        it('should call patchChildrenOfTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for patchChildrenOfTrackerItem call and complete the assertions
          /*

          instance.patchChildrenOfTrackerItem(body, itemId, mode, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemChildReference);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('replaceChildrenOfTracker', function() {
        it('should call replaceChildrenOfTracker successfully', function(done) {
          // TODO: uncomment, update parameter values for replaceChildrenOfTracker call and complete the assertions
          /*
          var opts = {};

          instance.replaceChildrenOfTracker(body, trackerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('replaceChildrenOfTrackerItem', function() {
        it('should call replaceChildrenOfTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for replaceChildrenOfTrackerItem call and complete the assertions
          /*
          var opts = {};

          instance.replaceChildrenOfTrackerItem(body, itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItemReferenceSearchResult);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unlockTrackerItem', function() {
        it('should call unlockTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for unlockTrackerItem call
          /*

          instance.unlockTrackerItem(itemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCustomFieldTrackerItem', function() {
        it('should call updateCustomFieldTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCustomFieldTrackerItem call and complete the assertions
          /*
          var opts = {};

          instance.updateCustomFieldTrackerItem(body, itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTableFieldTrackerItem', function() {
        it('should call updateTableFieldTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTableFieldTrackerItem call and complete the assertions
          /*

          instance.updateTableFieldTrackerItem(body, itemId, tableFieldId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTrackerItem', function() {
        it('should call updateTrackerItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTrackerItem call and complete the assertions
          /*
          var opts = {};

          instance.updateTrackerItem(body, itemId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CodebeamerSwaggerApi.TrackerItem);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
