/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InternalServerErrorException from '../model/InternalServerErrorException';
import ReportItemResult from '../model/ReportItemResult';
import ReportReference from '../model/ReportReference';
import ReportResult from '../model/ReportResult';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerReportSettings from '../model/TrackerReportSettings';

/**
* TrackerReport service.
* @module api/TrackerReportApi
* @version 3.0
*/
export default class TrackerReportApi {

    /**
    * Constructs a new TrackerReportApi. 
    * @alias module:api/TrackerReportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createTrackerReport operation.
     * @callback moduleapi/TrackerReportApi~createTrackerReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerReportSettings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a report of a specific tracker
     * @param {module:model/TrackerReportSettings} body 
     * @param {Number} trackerId 
     * @param {module:api/TrackerReportApi~createTrackerReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTrackerReport(body, trackerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTrackerReport");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling createTrackerReport");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerReportSettings;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrackerReport operation.
     * @callback moduleapi/TrackerReportApi~deleteTrackerReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a report of a specific tracker
     * @param {Number} trackerId 
     * @param {Number} reportId 
     * @param {module:api/TrackerReportApi~deleteTrackerReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackerReport(trackerId, reportId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling deleteTrackerReport");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling deleteTrackerReport");
      }

      let pathParams = {
        'trackerId': trackerId,'reportId': reportId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports/{reportId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerReport operation.
     * @callback moduleapi/TrackerReportApi~getTrackerReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report of a specific tracker
     * @param {Number} trackerId 
     * @param {Number} reportId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of a report page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items a report page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerReportApi~getTrackerReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerReport(trackerId, reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerReport");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getTrackerReport");
      }

      let pathParams = {
        'trackerId': trackerId,'reportId': reportId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports/{reportId}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerReportItems operation.
     * @callback moduleapi/TrackerReportApi~getTrackerReportItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportItemResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report items of a specific tracker view
     * @param {Number} trackerId 
     * @param {Number} reportId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of a report page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items a report page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerReportApi~getTrackerReportItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerReportItems(trackerId, reportId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerReportItems");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getTrackerReportItems");
      }

      let pathParams = {
        'trackerId': trackerId,'reportId': reportId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportItemResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports/{reportId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerReports operation.
     * @callback moduleapi/TrackerReportApi~getTrackerReportsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all reports of a specific tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerReportApi~getTrackerReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerReports(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerReports");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReportReference];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTrackerReport operation.
     * @callback moduleapi/TrackerReportApi~updateTrackerReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerReportSettings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a report of a specific tracker
     * @param {module:model/TrackerReportSettings} body 
     * @param {Number} trackerId 
     * @param {Number} reportId 
     * @param {module:api/TrackerReportApi~updateTrackerReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTrackerReport(body, trackerId, reportId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTrackerReport");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling updateTrackerReport");
      }
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling updateTrackerReport");
      }

      let pathParams = {
        'trackerId': trackerId,'reportId': reportId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackerReportSettings;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/reports/{reportId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}