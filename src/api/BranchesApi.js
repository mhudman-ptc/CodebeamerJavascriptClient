/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import TrackerItem from '../model/TrackerItem';

/**
* Branches service.
* @module api/BranchesApi
* @version 3.0
*/
export default class BranchesApi {

    /**
    * Constructs a new BranchesApi. 
    * @alias module:api/BranchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getTrackerItemOnBranch operation.
     * @callback moduleapi/BranchesApi~getTrackerItemOnBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItem{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker item on branch
     * API can be used for finding a tracker item by a branch id
     * @param {Number} sourceItemId 
     * @param {Number} branchId 
     * @param {module:api/BranchesApi~getTrackerItemOnBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemOnBranch(sourceItemId, branchId, callback) {
      
      let postBody = null;
      // verify the required parameter 'sourceItemId' is set
      if (sourceItemId === undefined || sourceItemId === null) {
        throw new Error("Missing the required parameter 'sourceItemId' when calling getTrackerItemOnBranch");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getTrackerItemOnBranch");
      }

      let pathParams = {
        'branchId': branchId
      };
      let queryParams = {
        'sourceItemId': sourceItemId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItem;

      return this.apiClient.callApi(
        '/v3/branches/{branchId}/item', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}