/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AbstractField from '../model/AbstractField';
import BadRequestException from '../model/BadRequestException';
import ChoiceOptionReference from '../model/ChoiceOptionReference';
import FieldReference from '../model/FieldReference';
import InternalServerErrorException from '../model/InternalServerErrorException';
import InvalidParametersException from '../model/InvalidParametersException';
import OutlineItemSearchResult from '../model/OutlineItemSearchResult';
import ReferenceSearchResult from '../model/ReferenceSearchResult';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import RestException from '../model/RestException';
import TooManyRequestsException from '../model/TooManyRequestsException';
import Tracker from '../model/Tracker';
import TrackerConfiguration from '../model/TrackerConfiguration';
import TrackerFieldStatusPermissions from '../model/TrackerFieldStatusPermissions';
import TrackerFieldsStatusPermissions from '../model/TrackerFieldsStatusPermissions';
import TrackerItemReferenceSearchResult from '../model/TrackerItemReferenceSearchResult';
import TrackerType from '../model/TrackerType';
import TrackerTypeReference from '../model/TrackerTypeReference';
import WorkflowTransition from '../model/WorkflowTransition';

/**
* Tracker service.
* @module api/TrackerApi
* @version 3.0
*/
export default class TrackerApi {

    /**
    * Constructs a new TrackerApi. 
    * @alias module:api/TrackerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteTracker operation.
     * @callback moduleapi/TrackerApi~deleteTrackerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~deleteTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTracker(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling deleteTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getChoiceOption operation.
     * @callback moduleapi/TrackerApi~getChoiceOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChoiceOptionReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get option of a choice field of tracker
     * @param {Number} trackerId 
     * @param {Number} fieldId 
     * @param {Number} optionId 
     * @param {module:api/TrackerApi~getChoiceOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getChoiceOption(trackerId, fieldId, optionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getChoiceOption");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getChoiceOption");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling getChoiceOption");
      }

      let pathParams = {
        'trackerId': trackerId,'fieldId': fieldId,'optionId': optionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ChoiceOptionReference;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/fields/{fieldId}/options/{optionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getItemsByTracker operation.
     * @callback moduleapi/TrackerApi~getItemsByTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerItemReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get items in a specific tracker
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Index of the result page starting from 1. (default to <.>)
     * @param {Number} opts.pageSize Number of items in a result page. Max value: 500 (default to <.>)
     * @param {module:api/TrackerApi~getItemsByTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getItemsByTracker(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getItemsByTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerItemReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTracker operation.
     * @callback moduleapi/TrackerApi~getTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tracker{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~getTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTracker(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tracker;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerBaselines operation.
     * @callback moduleapi/TrackerApi~getTrackerBaselinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferenceSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get baselines of a specific tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~getTrackerBaselinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerBaselines(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerBaselines");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReferenceSearchResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/baselines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerConfiguration operation.
     * @callback moduleapi/TrackerApi~getTrackerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerConfiguration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tracker configuration
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~getTrackerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerConfiguration(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerConfiguration");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = TrackerConfiguration;

      return this.apiClient.callApi(
        '/v3/tracker/{trackerId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerField operation.
     * @callback moduleapi/TrackerApi~getTrackerFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AbstractField{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field of tracker
     * @param {Number} trackerId 
     * @param {Number} fieldId 
     * @param {module:api/TrackerApi~getTrackerFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerField(trackerId, fieldId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerField");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getTrackerField");
      }

      let pathParams = {
        'trackerId': trackerId,'fieldId': fieldId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = AbstractField;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/fields/{fieldId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerFieldPermissions operation.
     * @callback moduleapi/TrackerApi~getTrackerFieldPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerFieldStatusPermissions>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions of tracker field
     * @param {Number} trackerId 
     * @param {Number} fieldId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.statusId 
     * @param {module:api/TrackerApi~getTrackerFieldPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerFieldPermissions(trackerId, fieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerFieldPermissions");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getTrackerFieldPermissions");
      }

      let pathParams = {
        'trackerId': trackerId,'fieldId': fieldId
      };
      let queryParams = {
        'statusId': opts['statusId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackerFieldStatusPermissions];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/fields/{fieldId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerFields operation.
     * @callback moduleapi/TrackerApi~getTrackerFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fields of tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~getTrackerFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerFields(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerFields");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [FieldReference];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerFieldsPermissions operation.
     * @callback moduleapi/TrackerApi~getTrackerFieldsPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerFieldsStatusPermissions{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions of all fields of a tracker
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.statusId 
     * @param {module:api/TrackerApi~getTrackerFieldsPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerFieldsPermissions(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerFieldsPermissions");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'statusId': opts['statusId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerFieldsStatusPermissions;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/fields/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerOutline operation.
     * @callback moduleapi/TrackerApi~getTrackerOutlineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutlineItemSearchResult{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get outline of a specific tracker
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentItemId Show only the children of this item.
     * @param {Number} opts.resultDepthFilter The depth level of the result outline.
     * @param {module:api/TrackerApi~getTrackerOutlineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerOutline(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerOutline");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'parentItemId': opts['parentItemId'],'resultDepthFilter': opts['resultDepthFilter']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OutlineItemSearchResult;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/outline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerSchema operation.
     * @callback moduleapi/TrackerApi~getTrackerSchemaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AbstractField>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the schema of a tracker
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~getTrackerSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerSchema(trackerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerSchema");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [AbstractField];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerTransitions operation.
     * @callback moduleapi/TrackerApi~getTrackerTransitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkflowTransition>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all transitions of a specific tracker
     * @param {Number} trackerId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromStatusId The from status id filter for transitions.
     * @param {module:api/TrackerApi~getTrackerTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerTransitions(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getTrackerTransitions");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        'fromStatusId': opts['fromStatusId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkflowTransition];

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerType operation.
     * @callback moduleapi/TrackerApi~getTrackerTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerType{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the immutable definition of a tracker type
     * @param {Number} trackerTypeId 
     * @param {module:api/TrackerApi~getTrackerTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerType(trackerTypeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'trackerTypeId' is set
      if (trackerTypeId === undefined || trackerTypeId === null) {
        throw new Error("Missing the required parameter 'trackerTypeId' when calling getTrackerType");
      }

      let pathParams = {
        'trackerTypeId': trackerTypeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackerType;

      return this.apiClient.callApi(
        '/v3/trackers/types/{trackerTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerTypes operation.
     * @callback moduleapi/TrackerApi~getTrackerTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackerTypeReference>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of tracker types
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.outline Outline is enabled, disabled or any(no filtering will be applied). (default to <.>)
     * @param {module:api/TrackerApi~getTrackerTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'outline': opts['outline']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackerTypeReference];

      return this.apiClient.callApi(
        '/v3/trackers/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTrackerConfiguration operation.
     * @callback moduleapi/TrackerApi~postTrackerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackerConfiguration{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update tracker configuration
     * @param {module:model/TrackerConfiguration} body 
     * @param {module:api/TrackerApi~postTrackerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTrackerConfiguration(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTrackerConfiguration");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = TrackerConfiguration;

      return this.apiClient.callApi(
        '/v3/tracker/configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTracker operation.
     * @callback moduleapi/TrackerApi~updateTrackerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tracker{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific tracker
     * @param {module:model/Tracker} body 
     * @param {Number} trackerId 
     * @param {module:api/TrackerApi~updateTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTracker(body, trackerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTracker");
      }
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling updateTracker");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tracker;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTrackerIcon operation.
     * @callback moduleapi/TrackerApi~updateTrackerIconCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a tracker icon
     * @param {Number} trackerId Id of the tracker
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.icon 
     * @param {module:api/TrackerApi~updateTrackerIconCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrackerIcon(trackerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling updateTrackerIcon");
      }

      let pathParams = {
        'trackerId': trackerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'icon': opts['icon']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/trackers/{trackerId}/icon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}