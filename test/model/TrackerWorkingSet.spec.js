/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodebeamerSwaggerApi);
  }
}(this, function(expect, CodebeamerSwaggerApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TrackerWorkingSet', function() {
      beforeEach(function() {
        instance = new CodebeamerSwaggerApi.TrackerWorkingSet();
      });

      it('should create an instance of TrackerWorkingSet', function() {
        // TODO: update the code to test TrackerWorkingSet
        expect(instance).to.be.a(CodebeamerSwaggerApi.TrackerWorkingSet);
      });

      it('should have the property baseline (base name: "baseline")', function() {
        // TODO: update the code to test the property baseline
        expect(instance).to.have.property('baseline');
        // expect(instance.baseline).to.be(expectedValueLiteral);
      });

      it('should have the property branch (base name: "branch")', function() {
        // TODO: update the code to test the property branch
        expect(instance).to.have.property('branch');
        // expect(instance.branch).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "createdBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property sharedInWorkingSet (base name: "sharedInWorkingSet")', function() {
        // TODO: update the code to test the property sharedInWorkingSet
        expect(instance).to.have.property('sharedInWorkingSet');
        // expect(instance.sharedInWorkingSet).to.be(expectedValueLiteral);
      });

      it('should have the property workingSet (base name: "workingSet")', function() {
        // TODO: update the code to test the property workingSet
        expect(instance).to.have.property('workingSet');
        // expect(instance.workingSet).to.be(expectedValueLiteral);
      });

    });
  });

}));
