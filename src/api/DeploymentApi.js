/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import BadRequestException from '../model/BadRequestException';
import ExportForDeploymentRequest from '../model/ExportForDeploymentRequest';
import JobReference from '../model/JobReference';
import NotImplementedException from '../model/NotImplementedException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceUnauthorizedException from '../model/ResourceUnauthorizedException';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* Deployment service.
* @module api/DeploymentApi
* @version 3.0
*/
export default class DeploymentApi {

    /**
    * Constructs a new DeploymentApi. 
    * @alias module:api/DeploymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the exportForDeployment operation.
     * @callback moduleapi/DeploymentApi~exportForDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export projects for deployment
     * @param {module:model/ExportForDeploymentRequest} body 
     * @param {module:api/DeploymentApi~exportForDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    exportForDeployment(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exportForDeployment");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobReference;

      return this.apiClient.callApi(
        '/v3/deployment/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadDeployment operation.
     * @callback moduleapi/DeploymentApi~uploadDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobReference{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a deployment process
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.importTrackerHierarchy 
     * @param {Blob} opts.imports 
     * @param {String} opts.password 
     * @param {Boolean} opts.skipRefreshComputedFields 
     * @param {module:api/DeploymentApi~uploadDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadDeployment(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'importTrackerHierarchy': opts['importTrackerHierarchy'],'imports': opts['imports'],'password': opts['password'],'skipRefreshComputedFields': opts['skipRefreshComputedFields']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = JobReference;

      return this.apiClient.callApi(
        '/v3/deployment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}