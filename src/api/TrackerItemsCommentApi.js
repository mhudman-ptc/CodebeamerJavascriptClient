/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Comment from '../model/Comment';
import InternalServerErrorException from '../model/InternalServerErrorException';
import ResourceForbiddenException from '../model/ResourceForbiddenException';
import ResourceLockedException from '../model/ResourceLockedException';
import ResourceNotFoundException from '../model/ResourceNotFoundException';
import TooManyRequestsException from '../model/TooManyRequestsException';

/**
* TrackerItemsComment service.
* @module api/TrackerItemsCommentApi
* @version 3.0
*/
export default class TrackerItemsCommentApi {

    /**
    * Constructs a new TrackerItemsCommentApi. 
    * @alias module:api/TrackerItemsCommentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the commentOnTrackerItem operation.
     * @callback moduleapi/TrackerItemsCommentApi~commentOnTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment on a tracker item
     * @param {Number} itemId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.attachments 
     * @param {String} opts.comment 
     * @param {module:model/String} opts.commentFormat 
     * @param {module:api/TrackerItemsCommentApi~commentOnTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    commentOnTrackerItem(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling commentOnTrackerItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'attachments': opts['attachments'],'comment': opts['comment'],'commentFormat': opts['commentFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrackerItemComment operation.
     * @callback moduleapi/TrackerItemsCommentApi~deleteTrackerItemCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete comment of tracker item by id
     * @param {Number} itemId 
     * @param {Number} commentId 
     * @param {module:api/TrackerItemsCommentApi~deleteTrackerItemCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTrackerItemComment(itemId, commentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTrackerItemComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteTrackerItemComment");
      }

      let pathParams = {
        'itemId': itemId,'commentId': commentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments/{commentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTrackerItemComments operation.
     * @callback moduleapi/TrackerItemsCommentApi~deleteTrackerItemCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete comments of tracker item by item id
     * @param {Number} itemId 
     * @param {module:api/TrackerItemsCommentApi~deleteTrackerItemCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackerItemComments(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTrackerItemComments");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editCommentOnTrackerItem operation.
     * @callback moduleapi/TrackerItemsCommentApi~editCommentOnTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit comment on a tracker item
     * @param {Number} itemId 
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.attachments 
     * @param {String} opts.comment 
     * @param {module:model/String} opts.commentFormat 
     * @param {module:api/TrackerItemsCommentApi~editCommentOnTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    editCommentOnTrackerItem(itemId, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling editCommentOnTrackerItem");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling editCommentOnTrackerItem");
      }

      let pathParams = {
        'itemId': itemId,'commentId': commentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'attachments': opts['attachments'],'comment': opts['comment'],'commentFormat': opts['commentFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments/{commentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemComment operation.
     * @callback moduleapi/TrackerItemsCommentApi~getTrackerItemCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comment of tracker item by id
     * @param {Number} itemId 
     * @param {Number} commentId 
     * @param {module:api/TrackerItemsCommentApi~getTrackerItemCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemComment(itemId, commentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getTrackerItemComment");
      }

      let pathParams = {
        'itemId': itemId,'commentId': commentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments/{commentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTrackerItemComments operation.
     * @callback moduleapi/TrackerItemsCommentApi~getTrackerItemCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments of tracker item
     * @param {Number} itemId Id of a tracker item
     * @param {module:api/TrackerItemsCommentApi~getTrackerItemCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTrackerItemComments(itemId, callback) {
      
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getTrackerItemComments");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the replyOnCommentOfTrackerItem operation.
     * @callback moduleapi/TrackerItemsCommentApi~replyOnCommentOfTrackerItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reply on a comment of a tracker item
     * @param {Number} itemId 
     * @param {Number} commentId 
     * @param {Object} opts Optional parameters
     * @param {Blob} opts.attachments 
     * @param {String} opts.comment 
     * @param {module:model/String} opts.commentFormat 
     * @param {module:api/TrackerItemsCommentApi~replyOnCommentOfTrackerItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    replyOnCommentOfTrackerItem(itemId, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling replyOnCommentOfTrackerItem");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling replyOnCommentOfTrackerItem");
      }

      let pathParams = {
        'itemId': itemId,'commentId': commentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'attachments': opts['attachments'],'comment': opts['comment'],'commentFormat': opts['commentFormat']
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth', 'BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/v3/items/{itemId}/comments/{commentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}