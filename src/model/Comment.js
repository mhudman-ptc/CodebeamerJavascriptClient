/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import CommentReference from './CommentReference';
import UserReference from './UserReference';

/**
 * The Comment model module.
 * @module model/Comment
 * @version 3.0
 */
export default class Comment {
  /**
   * Constructs a new <code>Comment</code>.
   * Comment of a tracker item
   * @alias module:model/Comment
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Comment} obj Optional instance to populate.
   * @return {module:model/Comment} The populated <code>Comment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Comment();
      if (data.hasOwnProperty('attachments'))
        obj.attachments = ApiClient.convertToType(data['attachments'], [Attachment]);
      if (data.hasOwnProperty('comment'))
        obj.comment = ApiClient.convertToType(data['comment'], 'String');
      if (data.hasOwnProperty('commentFormat'))
        obj.commentFormat = ApiClient.convertToType(data['commentFormat'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('createdBy'))
        obj.createdBy = UserReference.constructFromObject(data['createdBy']);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('modifiedAt'))
        obj.modifiedAt = ApiClient.convertToType(data['modifiedAt'], 'Date');
      if (data.hasOwnProperty('modifiedBy'))
        obj.modifiedBy = UserReference.constructFromObject(data['modifiedBy']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('parent'))
        obj.parent = CommentReference.constructFromObject(data['parent']);
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'Number');
    }
    return obj;
  }
}

/**
 * Attachments of a comment
 * @member {Array.<module:model/Attachment>} attachments
 */
Comment.prototype.attachments = undefined;

/**
 * Text of a comment
 * @member {String} comment
 */
Comment.prototype.comment = undefined;

/**
 * Allowed values for the <code>commentFormat</code> property.
 * @enum {String}
 * @readonly
 */
Comment.CommentFormatEnum = {
  /**
   * value: "PlainText"
   * @const
   */
  plainText: "PlainText",

  /**
   * value: "Html"
   * @const
   */
  html: "Html",

  /**
   * value: "Wiki"
   * @const
   */
  wiki: "Wiki"
};
/**
 * Format of a comment
 * @member {module:model/Comment.CommentFormatEnum} commentFormat
 */
Comment.prototype.commentFormat = undefined;

/**
 * The date when the entity was created
 * @member {Date} createdAt
 */
Comment.prototype.createdAt = undefined;

/**
 * @member {module:model/UserReference} createdBy
 */
Comment.prototype.createdBy = undefined;

/**
 * Id of the entity
 * @member {Number} id
 */
Comment.prototype.id = undefined;

/**
 * The date when the entity was modified
 * @member {Date} modifiedAt
 */
Comment.prototype.modifiedAt = undefined;

/**
 * @member {module:model/UserReference} modifiedBy
 */
Comment.prototype.modifiedBy = undefined;

/**
 * Name of the entity
 * @member {String} name
 */
Comment.prototype.name = undefined;

/**
 * @member {module:model/CommentReference} parent
 */
Comment.prototype.parent = undefined;

/**
 * Version of a comment
 * @member {Number} version
 */
Comment.prototype.version = undefined;

