/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import ReportColumnSettings from './ReportColumnSettings';
import TrackerReference from './TrackerReference';
import TrackerTypeReference from './TrackerTypeReference';

/**
 * The ReportReferenceLevelSettings model module.
 * @module model/ReportReferenceLevelSettings
 * @version 3.0
 */
export default class ReportReferenceLevelSettings {
  /**
   * Constructs a new <code>ReportReferenceLevelSettings</code>.
   * Reference level settings for Intelligent Table View.
   * @alias module:model/ReportReferenceLevelSettings
   * @class
   * @param columns {Array.<module:model/ReportColumnSettings>} Columns to show on this reference level.
   * @param downstreamReference {Boolean} Include downstream references indicator.
   * @param level {Number} Level of the reference layer
   * @param upstreamReference {Boolean} Include upstream references indicator.
   */
  constructor(columns, downstreamReference, level, upstreamReference) {
    this.columns = columns;
    this.downstreamReference = downstreamReference;
    this.level = level;
    this.upstreamReference = upstreamReference;
  }

  /**
   * Constructs a <code>ReportReferenceLevelSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ReportReferenceLevelSettings} obj Optional instance to populate.
   * @return {module:model/ReportReferenceLevelSettings} The populated <code>ReportReferenceLevelSettings</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ReportReferenceLevelSettings();
      if (data.hasOwnProperty('columns'))
        obj.columns = ApiClient.convertToType(data['columns'], [ReportColumnSettings]);
      if (data.hasOwnProperty('downstreamReference'))
        obj.downstreamReference = ApiClient.convertToType(data['downstreamReference'], 'Boolean');
      if (data.hasOwnProperty('level'))
        obj.level = ApiClient.convertToType(data['level'], 'Number');
      if (data.hasOwnProperty('referenceTrackerTypes'))
        obj.referenceTrackerTypes = ApiClient.convertToType(data['referenceTrackerTypes'], [TrackerTypeReference]);
      if (data.hasOwnProperty('referenceTrackers'))
        obj.referenceTrackers = ApiClient.convertToType(data['referenceTrackers'], [TrackerReference]);
      if (data.hasOwnProperty('upstreamReference'))
        obj.upstreamReference = ApiClient.convertToType(data['upstreamReference'], 'Boolean');
    }
    return obj;
  }
}

/**
 * Columns to show on this reference level.
 * @member {Array.<module:model/ReportColumnSettings>} columns
 */
ReportReferenceLevelSettings.prototype.columns = undefined;

/**
 * Include downstream references indicator.
 * @member {Boolean} downstreamReference
 */
ReportReferenceLevelSettings.prototype.downstreamReference = undefined;

/**
 * Level of the reference layer
 * @member {Number} level
 */
ReportReferenceLevelSettings.prototype.level = undefined;

/**
 * Tracker types to include on this level.
 * @member {Array.<module:model/TrackerTypeReference>} referenceTrackerTypes
 */
ReportReferenceLevelSettings.prototype.referenceTrackerTypes = undefined;

/**
 * Trackers to include on this level.
 * @member {Array.<module:model/TrackerReference>} referenceTrackers
 */
ReportReferenceLevelSettings.prototype.referenceTrackers = undefined;

/**
 * Include upstream references indicator.
 * @member {Boolean} upstreamReference
 */
ReportReferenceLevelSettings.prototype.upstreamReference = undefined;

