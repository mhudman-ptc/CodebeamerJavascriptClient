/*
 * Codebeamer swagger API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.61
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import TrackerItemReference from './TrackerItemReference';
import TrackerItemsRequest from './TrackerItemsRequest';

/**
 * The TrackerItemAttachmentRequest model module.
 * @module model/TrackerItemAttachmentRequest
 * @version 3.0
 */
export default class TrackerItemAttachmentRequest extends TrackerItemsRequest {
  /**
   * Constructs a new <code>TrackerItemAttachmentRequest</code>.
   * Request data to retrieve tracker item attachments.
   * @alias module:model/TrackerItemAttachmentRequest
   * @class
   * @extends module:model/TrackerItemsRequest
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>TrackerItemAttachmentRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TrackerItemAttachmentRequest} obj Optional instance to populate.
   * @return {module:model/TrackerItemAttachmentRequest} The populated <code>TrackerItemAttachmentRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TrackerItemAttachmentRequest();
      TrackerItemsRequest.constructFromObject(data, obj);
      if (data.hasOwnProperty('baselineId'))
        obj.baselineId = ApiClient.convertToType(data['baselineId'], 'Number');
      if (data.hasOwnProperty('excludeFilter'))
        obj.excludeFilter = ApiClient.convertToType(data['excludeFilter'], 'Boolean');
      if (data.hasOwnProperty('extensions'))
        obj.extensions = ApiClient.convertToType(data['extensions'], ['String']);
      if (data.hasOwnProperty('mimeTypes'))
        obj.mimeTypes = ApiClient.convertToType(data['mimeTypes'], ['String']);
    }
    return obj;
  }
}

/**
 * Baseline id to specify the versions of the tracker items.
 * @member {Number} baselineId
 */
TrackerItemAttachmentRequest.prototype.baselineId = undefined;

/**
 * Indicator if the attachments matching the filters need to be excluded or not
 * @member {Boolean} excludeFilter
 */
TrackerItemAttachmentRequest.prototype.excludeFilter = undefined;

/**
 * File extension filters.
 * @member {Array.<String>} extensions
 */
TrackerItemAttachmentRequest.prototype.extensions = undefined;

/**
 * File mime type filters.
 * @member {Array.<String>} mimeTypes
 */
TrackerItemAttachmentRequest.prototype.mimeTypes = undefined;

